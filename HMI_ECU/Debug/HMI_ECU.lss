
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003458  000034ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000f6  008000f6  00003582  2**0
                  ALLOC
  3 .stab         00002f10  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001278  00000000  00000000  00006494  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000770c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000784c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000079bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009605  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 be 19 	jmp	0x337c	; 0x337c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void CountByTimer1(uint8 Seconds);



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ab 97       	sbiw	r28, 0x2b	; 43
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	LCD_init();			/* Initialize LCD driver*/
     b5a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <LCD_init>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec, 1 stop bit, disabled parity and 8 bit character */
	UART_ConfigType UART_Structure={EIGHT_BIT,DISABLED,ONE_BIT,9600};
     b5e:	9e 01       	movw	r18, r28
     b60:	22 5e       	subi	r18, 0xE2	; 226
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	38 a7       	std	Y+40, r19	; 0x28
     b66:	2f a3       	std	Y+39, r18	; 0x27
     b68:	89 ee       	ldi	r24, 0xE9	; 233
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	9a a7       	std	Y+42, r25	; 0x2a
     b6e:	89 a7       	std	Y+41, r24	; 0x29
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	9b a7       	std	Y+43, r25	; 0x2b
     b74:	e9 a5       	ldd	r30, Y+41	; 0x29
     b76:	fa a5       	ldd	r31, Y+42	; 0x2a
     b78:	00 80       	ld	r0, Z
     b7a:	29 a5       	ldd	r18, Y+41	; 0x29
     b7c:	3a a5       	ldd	r19, Y+42	; 0x2a
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	3a a7       	std	Y+42, r19	; 0x2a
     b84:	29 a7       	std	Y+41, r18	; 0x29
     b86:	ef a1       	ldd	r30, Y+39	; 0x27
     b88:	f8 a5       	ldd	r31, Y+40	; 0x28
     b8a:	00 82       	st	Z, r0
     b8c:	2f a1       	ldd	r18, Y+39	; 0x27
     b8e:	38 a5       	ldd	r19, Y+40	; 0x28
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	38 a7       	std	Y+40, r19	; 0x28
     b96:	2f a3       	std	Y+39, r18	; 0x27
     b98:	3b a5       	ldd	r19, Y+43	; 0x2b
     b9a:	31 50       	subi	r19, 0x01	; 1
     b9c:	3b a7       	std	Y+43, r19	; 0x2b
     b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
     ba0:	88 23       	and	r24, r24
     ba2:	41 f7       	brne	.-48     	; 0xb74 <main+0x2e>
	UART_init(&UART_Structure);
     ba4:	ce 01       	movw	r24, r28
     ba6:	4e 96       	adiw	r24, 0x1e	; 30
     ba8:	0e 94 78 18 	call	0x30f0	; 0x30f0 <UART_init>

	uint8 Decision;		/*Variable to store the received decision from MC2 */
	/*To set a password for the system at first use */
	UART_sendByte(SetFirstPasswordFn);
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	0e 94 f6 18 	call	0x31ec	; 0x31ec <UART_sendByte>
	Decision = UART_recieveByte();
     bb2:	0e 94 0d 19 	call	0x321a	; 0x321a <UART_recieveByte>
     bb6:	8d 8f       	std	Y+29, r24	; 0x1d
	if (Decision==TRUE)
     bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <main+0x7c>
	{

	}
	else{
	SetNewPassword ();
     bbe:	0e 94 ad 08 	call	0x115a	; 0x115a <SetNewPassword>
	}


	while(1){
		GetOptions();
     bc2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <GetOptions>
		Decision = UART_recieveByte();
     bc6:	0e 94 0d 19 	call	0x321a	; 0x321a <UART_recieveByte>
     bca:	8d 8f       	std	Y+29, r24	; 0x1d
		switch (Decision){
     bcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bce:	e8 2f       	mov	r30, r24
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	fe a3       	std	Y+38, r31	; 0x26
     bd4:	ed a3       	std	Y+37, r30	; 0x25
     bd6:	2d a1       	ldd	r18, Y+37	; 0x25
     bd8:	3e a1       	ldd	r19, Y+38	; 0x26
     bda:	23 30       	cpi	r18, 0x03	; 3
     bdc:	31 05       	cpc	r19, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <main+0x9c>
     be0:	a0 c0       	rjmp	.+320    	; 0xd22 <main+0x1dc>
     be2:	8d a1       	ldd	r24, Y+37	; 0x25
     be4:	9e a1       	ldd	r25, Y+38	; 0x26
     be6:	84 30       	cpi	r24, 0x04	; 4
     be8:	91 05       	cpc	r25, r1
     bea:	59 f7       	brne	.-42     	; 0xbc2 <main+0x7c>
		case OpenDoorFn:

			InformMC2(EnterPasswordFn);
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	0e 94 58 09 	call	0x12b0	; 0x12b0 <InformMC2>
			LCD_clearScreen();
     bf2:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter password:");
     bf6:	20 e6       	ldi	r18, 0x60	; 96
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	a9 01       	movw	r20, r18
     c00:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
			GetPassword();
     c04:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>

			if(CheckDecision())
     c08:	0e 94 4b 09 	call	0x1296	; 0x1296 <CheckDecision>
     c0c:	88 23       	and	r24, r24
     c0e:	69 f0       	breq	.+26     	; 0xc2a <main+0xe4>
			{
				LCD_clearScreen();
     c10:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Opening the door");
     c14:	20 e7       	ldi	r18, 0x70	; 112
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	a9 01       	movw	r20, r18
     c1e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
				CountByTimer1(33);
     c22:	81 e2       	ldi	r24, 0x21	; 33
     c24:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <CountByTimer1>
     c28:	cc cf       	rjmp	.-104    	; 0xbc2 <main+0x7c>
			}
			else
			{
				LCD_clearScreen();
     c2a:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Wrong password");
     c2e:	21 e8       	ldi	r18, 0x81	; 129
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	a9 01       	movw	r20, r18
     c38:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	aa e7       	ldi	r26, 0x7A	; 122
     c42:	b4 e4       	ldi	r27, 0x44	; 68
     c44:	89 8f       	std	Y+25, r24	; 0x19
     c46:	9a 8f       	std	Y+26, r25	; 0x1a
     c48:	ab 8f       	std	Y+27, r26	; 0x1b
     c4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4c:	69 8d       	ldd	r22, Y+25	; 0x19
     c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	4a ef       	ldi	r20, 0xFA	; 250
     c5a:	54 e4       	ldi	r21, 0x44	; 68
     c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	8d 8b       	std	Y+21, r24	; 0x15
     c66:	9e 8b       	std	Y+22, r25	; 0x16
     c68:	af 8b       	std	Y+23, r26	; 0x17
     c6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c6c:	6d 89       	ldd	r22, Y+21	; 0x15
     c6e:	7e 89       	ldd	r23, Y+22	; 0x16
     c70:	8f 89       	ldd	r24, Y+23	; 0x17
     c72:	98 8d       	ldd	r25, Y+24	; 0x18
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e8       	ldi	r20, 0x80	; 128
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c80:	88 23       	and	r24, r24
     c82:	2c f4       	brge	.+10     	; 0xc8e <main+0x148>
		__ticks = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9c 8b       	std	Y+20, r25	; 0x14
     c8a:	8b 8b       	std	Y+19, r24	; 0x13
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <main+0x1c6>
	else if (__tmp > 65535)
     c8e:	6d 89       	ldd	r22, Y+21	; 0x15
     c90:	7e 89       	ldd	r23, Y+22	; 0x16
     c92:	8f 89       	ldd	r24, Y+23	; 0x17
     c94:	98 8d       	ldd	r25, Y+24	; 0x18
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	3f ef       	ldi	r19, 0xFF	; 255
     c9a:	4f e7       	ldi	r20, 0x7F	; 127
     c9c:	57 e4       	ldi	r21, 0x47	; 71
     c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca2:	18 16       	cp	r1, r24
     ca4:	4c f5       	brge	.+82     	; 0xcf8 <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca6:	69 8d       	ldd	r22, Y+25	; 0x19
     ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e2       	ldi	r20, 0x20	; 32
     cb4:	51 e4       	ldi	r21, 0x41	; 65
     cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	9c 8b       	std	Y+20, r25	; 0x14
     ccc:	8b 8b       	std	Y+19, r24	; 0x13
     cce:	0f c0       	rjmp	.+30     	; 0xcee <main+0x1a8>
     cd0:	88 ec       	ldi	r24, 0xC8	; 200
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9a 8b       	std	Y+18, r25	; 0x12
     cd6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd8:	89 89       	ldd	r24, Y+17	; 0x11
     cda:	9a 89       	ldd	r25, Y+18	; 0x12
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <main+0x196>
     ce0:	9a 8b       	std	Y+18, r25	; 0x12
     ce2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce4:	8b 89       	ldd	r24, Y+19	; 0x13
     ce6:	9c 89       	ldd	r25, Y+20	; 0x14
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	9c 8b       	std	Y+20, r25	; 0x14
     cec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cee:	8b 89       	ldd	r24, Y+19	; 0x13
     cf0:	9c 89       	ldd	r25, Y+20	; 0x14
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	69 f7       	brne	.-38     	; 0xcd0 <main+0x18a>
     cf6:	65 cf       	rjmp	.-310    	; 0xbc2 <main+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf8:	6d 89       	ldd	r22, Y+21	; 0x15
     cfa:	7e 89       	ldd	r23, Y+22	; 0x16
     cfc:	8f 89       	ldd	r24, Y+23	; 0x17
     cfe:	98 8d       	ldd	r25, Y+24	; 0x18
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	9c 8b       	std	Y+20, r25	; 0x14
     d0a:	8b 8b       	std	Y+19, r24	; 0x13
     d0c:	8b 89       	ldd	r24, Y+19	; 0x13
     d0e:	9c 89       	ldd	r25, Y+20	; 0x14
     d10:	98 8b       	std	Y+16, r25	; 0x10
     d12:	8f 87       	std	Y+15, r24	; 0x0f
     d14:	8f 85       	ldd	r24, Y+15	; 0x0f
     d16:	98 89       	ldd	r25, Y+16	; 0x10
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <main+0x1d2>
     d1c:	98 8b       	std	Y+16, r25	; 0x10
     d1e:	8f 87       	std	Y+15, r24	; 0x0f
     d20:	50 cf       	rjmp	.-352    	; 0xbc2 <main+0x7c>
				_delay_ms(1000);
			}
			break;

		case ChangePasswordFn:
			LCD_clearScreen();
     d22:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter password:");
     d26:	20 e6       	ldi	r18, 0x60	; 96
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	a9 01       	movw	r20, r18
     d30:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
			GetPassword();
     d34:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>
			if(CheckDecision())
     d38:	0e 94 4b 09 	call	0x1296	; 0x1296 <CheckDecision>
     d3c:	88 23       	and	r24, r24
     d3e:	19 f0       	breq	.+6      	; 0xd46 <main+0x200>
			{
				SetNewPassword ();
     d40:	0e 94 ad 08 	call	0x115a	; 0x115a <SetNewPassword>
     d44:	3e cf       	rjmp	.-388    	; 0xbc2 <main+0x7c>
			}
			else
			{
				LCD_clearScreen();
     d46:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Wrong password");
     d4a:	21 e8       	ldi	r18, 0x81	; 129
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	a9 01       	movw	r20, r18
     d54:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	aa e7       	ldi	r26, 0x7A	; 122
     d5e:	b4 e4       	ldi	r27, 0x44	; 68
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a ef       	ldi	r20, 0xFA	; 250
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <main+0x264>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <main+0x2e2>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <main+0x2c4>
     dec:	88 ec       	ldi	r24, 0xC8	; 200
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x2b2>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <main+0x2a6>
     e12:	d7 ce       	rjmp	.-594    	; 0xbc2 <main+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <main+0x2ee>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	c2 ce       	rjmp	.-636    	; 0xbc2 <main+0x7c>

00000e3e <ChangePassword>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void ChangePassword (void)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2e 97       	sbiw	r28, 0x0e	; 14
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
     e52:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter new pass:");
     e56:	20 e9       	ldi	r18, 0x90	; 144
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
	GetPassword();
     e64:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	aa ef       	ldi	r26, 0xFA	; 250
     e6e:	b3 e4       	ldi	r27, 0x43	; 67
     e70:	8b 87       	std	Y+11, r24	; 0x0b
     e72:	9c 87       	std	Y+12, r25	; 0x0c
     e74:	ad 87       	std	Y+13, r26	; 0x0d
     e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e78:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	4a ef       	ldi	r20, 0xFA	; 250
     e86:	54 e4       	ldi	r21, 0x44	; 68
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	8f 83       	std	Y+7, r24	; 0x07
     e92:	98 87       	std	Y+8, r25	; 0x08
     e94:	a9 87       	std	Y+9, r26	; 0x09
     e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e98:	6f 81       	ldd	r22, Y+7	; 0x07
     e9a:	78 85       	ldd	r23, Y+8	; 0x08
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eac:	88 23       	and	r24, r24
     eae:	2c f4       	brge	.+10     	; 0xeba <ChangePassword+0x7c>
		__ticks = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
     eb8:	3f c0       	rjmp	.+126    	; 0xf38 <ChangePassword+0xfa>
	else if (__tmp > 65535)
     eba:	6f 81       	ldd	r22, Y+7	; 0x07
     ebc:	78 85       	ldd	r23, Y+8	; 0x08
     ebe:	89 85       	ldd	r24, Y+9	; 0x09
     ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	4f e7       	ldi	r20, 0x7F	; 127
     ec8:	57 e4       	ldi	r21, 0x47	; 71
     eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ece:	18 16       	cp	r1, r24
     ed0:	4c f5       	brge	.+82     	; 0xf24 <ChangePassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e2       	ldi	r20, 0x20	; 32
     ee0:	51 e4       	ldi	r21, 0x41	; 65
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <ChangePassword+0xdc>
     efc:	88 ec       	ldi	r24, 0xC8	; 200
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9c 83       	std	Y+4, r25	; 0x04
     f02:	8b 83       	std	Y+3, r24	; 0x03
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <ChangePassword+0xca>
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	9e 81       	ldd	r25, Y+6	; 0x06
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	69 f7       	brne	.-38     	; 0xefc <ChangePassword+0xbe>
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <ChangePassword+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <ChangePassword+0x106>
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearScreen();
     f4c:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Renter new pass:");
     f50:	20 ea       	ldi	r18, 0xA0	; 160
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
	GetPassword();
     f5e:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>

}
     f62:	2e 96       	adiw	r28, 0x0e	; 14
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <GetPassword>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void GetPassword(void)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	a1 97       	sbiw	r28, 0x21	; 33
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
	uint8 Password[17];
	uint8 key;
	uint8 counter = 0;
     f88:	1f 86       	std	Y+15, r1	; 0x0f
	do
	{
		key = KEYPAD_getPressedKey();
     f8a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <KEYPAD_getPressedKey>
     f8e:	88 8b       	std	Y+16, r24	; 0x10

		if((key >= 0) && (key <= 9))
     f90:	88 89       	ldd	r24, Y+16	; 0x10
     f92:	8a 30       	cpi	r24, 0x0A	; 10
     f94:	08 f0       	brcs	.+2      	; 0xf98 <GetPassword+0x24>
     f96:	88 c0       	rjmp	.+272    	; 0x10a8 <GetPassword+0x134>
		{
			Password[counter]=key+48;
     f98:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	88 89       	ldd	r24, Y+16	; 0x10
     fa0:	48 2f       	mov	r20, r24
     fa2:	40 5d       	subi	r20, 0xD0	; 208
     fa4:	ce 01       	movw	r24, r28
     fa6:	41 96       	adiw	r24, 0x11	; 17
     fa8:	fc 01       	movw	r30, r24
     faa:	e2 0f       	add	r30, r18
     fac:	f3 1f       	adc	r31, r19
     fae:	40 83       	st	Z, r20
			LCD_displayStringRowColumn(1,counter,"*");
     fb0:	21 eb       	ldi	r18, 0xB1	; 177
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	6f 85       	ldd	r22, Y+15	; 0x0f
     fb8:	a9 01       	movw	r20, r18
     fba:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
			counter++;
     fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	aa ef       	ldi	r26, 0xFA	; 250
     fca:	b3 e4       	ldi	r27, 0x43	; 67
     fcc:	8b 87       	std	Y+11, r24	; 0x0b
     fce:	9c 87       	std	Y+12, r25	; 0x0c
     fd0:	ad 87       	std	Y+13, r26	; 0x0d
     fd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fda:	9e 85       	ldd	r25, Y+14	; 0x0e
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a ef       	ldi	r20, 0xFA	; 250
     fe2:	54 e4       	ldi	r21, 0x44	; 68
     fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	8f 83       	std	Y+7, r24	; 0x07
     fee:	98 87       	std	Y+8, r25	; 0x08
     ff0:	a9 87       	std	Y+9, r26	; 0x09
     ff2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff4:	6f 81       	ldd	r22, Y+7	; 0x07
     ff6:	78 85       	ldd	r23, Y+8	; 0x08
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e8       	ldi	r20, 0x80	; 128
    1002:	5f e3       	ldi	r21, 0x3F	; 63
    1004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1008:	88 23       	and	r24, r24
    100a:	2c f4       	brge	.+10     	; 0x1016 <GetPassword+0xa2>
		__ticks = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9e 83       	std	Y+6, r25	; 0x06
    1012:	8d 83       	std	Y+5, r24	; 0x05
    1014:	3f c0       	rjmp	.+126    	; 0x1094 <GetPassword+0x120>
	else if (__tmp > 65535)
    1016:	6f 81       	ldd	r22, Y+7	; 0x07
    1018:	78 85       	ldd	r23, Y+8	; 0x08
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102a:	18 16       	cp	r1, r24
    102c:	4c f5       	brge	.+82     	; 0x1080 <GetPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1030:	7c 85       	ldd	r23, Y+12	; 0x0c
    1032:	8d 85       	ldd	r24, Y+13	; 0x0d
    1034:	9e 85       	ldd	r25, Y+14	; 0x0e
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <GetPassword+0x102>
    1058:	88 ec       	ldi	r24, 0xC8	; 200
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <GetPassword+0xf0>
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f7       	brne	.-38     	; 0x1058 <GetPassword+0xe4>
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <GetPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <GetPassword+0x12c>
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
		}
	}
	while(key != '=');
    10a8:	88 89       	ldd	r24, Y+16	; 0x10
    10aa:	8d 33       	cpi	r24, 0x3D	; 61
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <GetPassword+0x13c>
    10ae:	6d cf       	rjmp	.-294    	; 0xf8a <GetPassword+0x16>
	Password[counter]= '#';
    10b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	ce 01       	movw	r24, r28
    10b8:	41 96       	adiw	r24, 0x11	; 17
    10ba:	fc 01       	movw	r30, r24
    10bc:	e2 0f       	add	r30, r18
    10be:	f3 1f       	adc	r31, r19
    10c0:	83 e2       	ldi	r24, 0x23	; 35
    10c2:	80 83       	st	Z, r24
	Password[counter+1]= NULL_PTR ;
    10c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9c 01       	movw	r18, r24
    10cc:	2f 5f       	subi	r18, 0xFF	; 255
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	ce 01       	movw	r24, r28
    10d2:	41 96       	adiw	r24, 0x11	; 17
    10d4:	fc 01       	movw	r30, r24
    10d6:	e2 0f       	add	r30, r18
    10d8:	f3 1f       	adc	r31, r19
    10da:	10 82       	st	Z, r1

	/* Wait until MC2 is ready to receive the string */
	while(UART_recieveByte() != MC2_READY){}
    10dc:	0e 94 0d 19 	call	0x321a	; 0x321a <UART_recieveByte>
    10e0:	87 30       	cpi	r24, 0x07	; 7
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <GetPassword+0x168>
	UART_sendString(Password);
    10e4:	ce 01       	movw	r24, r28
    10e6:	41 96       	adiw	r24, 0x11	; 17
    10e8:	0e 94 20 19 	call	0x3240	; 0x3240 <UART_sendString>
}
    10ec:	a1 96       	adiw	r28, 0x21	; 33
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <GetOptions>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void GetOptions (void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(GetOptionsFn);	/* Inform MC2 of selected function */
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 f6 18 	call	0x31ec	; 0x31ec <UART_sendByte>

	uint8 key;
	LCD_clearScreen();
    110e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open door");
    1112:	23 eb       	ldi	r18, 0xB3	; 179
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	a9 01       	movw	r20, r18
    111c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change pass");
    1120:	21 ec       	ldi	r18, 0xC1	; 193
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
	do{
	key = KEYPAD_getPressedKey();
    112e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <KEYPAD_getPressedKey>
    1132:	89 83       	std	Y+1, r24	; 0x01
	if((key == '+') || (key == '-'))
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	8b 32       	cpi	r24, 0x2B	; 43
    1138:	19 f0       	breq	.+6      	; 0x1140 <GetOptions+0x42>
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	8d 32       	cpi	r24, 0x2D	; 45
    113e:	19 f4       	brne	.+6      	; 0x1146 <GetOptions+0x48>
	{

		UART_sendByte(key);
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	0e 94 f6 18 	call	0x31ec	; 0x31ec <UART_sendByte>
	}
	}while((key != '+') && (key != '-'));
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	8b 32       	cpi	r24, 0x2B	; 43
    114a:	19 f0       	breq	.+6      	; 0x1152 <GetOptions+0x54>
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	8d 32       	cpi	r24, 0x2D	; 45
    1150:	71 f7       	brne	.-36     	; 0x112e <GetOptions+0x30>
}
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <SetNewPassword>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void SetNewPassword (void)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	2f 97       	sbiw	r28, 0x0f	; 15
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
	uint8 Decision;
	do{
		InformMC2(SetNewPasswordFn);
    116e:	89 e0       	ldi	r24, 0x09	; 9
    1170:	0e 94 58 09 	call	0x12b0	; 0x12b0 <InformMC2>
		ChangePassword();
    1174:	0e 94 1f 07 	call	0xe3e	; 0xe3e <ChangePassword>
		Decision = CheckDecision();
    1178:	0e 94 4b 09 	call	0x1296	; 0x1296 <CheckDecision>
    117c:	8f 87       	std	Y+15, r24	; 0x0f
		if (!Decision){
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1180:	88 23       	and	r24, r24
    1182:	09 f0       	breq	.+2      	; 0x1186 <SetNewPassword+0x2c>
    1184:	7b c0       	rjmp	.+246    	; 0x127c <SetNewPassword+0x122>
			LCD_clearScreen();
    1186:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Error: mismatch");
    118a:	21 ed       	ldi	r18, 0xD1	; 209
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	0e 94 20 17 	call	0x2e40	; 0x2e40 <LCD_displayStringRowColumn>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	aa e7       	ldi	r26, 0x7A	; 122
    119e:	b4 e4       	ldi	r27, 0x44	; 68
    11a0:	8b 87       	std	Y+11, r24	; 0x0b
    11a2:	9c 87       	std	Y+12, r25	; 0x0c
    11a4:	ad 87       	std	Y+13, r26	; 0x0d
    11a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	4a ef       	ldi	r20, 0xFA	; 250
    11b6:	54 e4       	ldi	r21, 0x44	; 68
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8f 83       	std	Y+7, r24	; 0x07
    11c2:	98 87       	std	Y+8, r25	; 0x08
    11c4:	a9 87       	std	Y+9, r26	; 0x09
    11c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	2c f4       	brge	.+10     	; 0x11ea <SetNewPassword+0x90>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    11e8:	3f c0       	rjmp	.+126    	; 0x1268 <SetNewPassword+0x10e>
	else if (__tmp > 65535)
    11ea:	6f 81       	ldd	r22, Y+7	; 0x07
    11ec:	78 85       	ldd	r23, Y+8	; 0x08
    11ee:	89 85       	ldd	r24, Y+9	; 0x09
    11f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	4c f5       	brge	.+82     	; 0x1254 <SetNewPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	6b 85       	ldd	r22, Y+11	; 0x0b
    1204:	7c 85       	ldd	r23, Y+12	; 0x0c
    1206:	8d 85       	ldd	r24, Y+13	; 0x0d
    1208:	9e 85       	ldd	r25, Y+14	; 0x0e
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e2       	ldi	r20, 0x20	; 32
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	0f c0       	rjmp	.+30     	; 0x124a <SetNewPassword+0xf0>
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9c 83       	std	Y+4, r25	; 0x04
    1232:	8b 83       	std	Y+3, r24	; 0x03
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <SetNewPassword+0xde>
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f7       	brne	.-38     	; 0x122c <SetNewPassword+0xd2>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <SetNewPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <SetNewPassword+0x11a>
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}while(!Decision );
    127c:	8f 85       	ldd	r24, Y+15	; 0x0f
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <SetNewPassword+0x12a>
    1282:	75 cf       	rjmp	.-278    	; 0x116e <SetNewPassword+0x14>
}
    1284:	2f 96       	adiw	r28, 0x0f	; 15
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <CheckDecision>:
 * 		uint8 Decision: the returned decision value from MC2
 */


uint8 CheckDecision(void)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	uint8 Decision;
	Decision = UART_recieveByte();
    12a0:	0e 94 0d 19 	call	0x321a	; 0x321a <UART_recieveByte>
    12a4:	89 83       	std	Y+1, r24	; 0x01
	return Decision;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <InformMC2>:
/********************************************************************************************************/

void InformMC2(uint8 SelectedFn)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(SelectedFn);
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	0e 94 f6 18 	call	0x31ec	; 0x31ec <UART_sendByte>
}
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <TickCounter>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void TickCounter(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    12d2:	80 91 f6 00 	lds	r24, 0x00F6
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 f6 00 	sts	0x00F6, r24
	if(g_tick == NUMBER_OF_COMPARE_MTACHES_PER_SECOND)
    12dc:	80 91 f6 00 	lds	r24, 0x00F6
    12e0:	8f 31       	cpi	r24, 0x1F	; 31
    12e2:	29 f4       	brne	.+10     	; 0x12ee <TickCounter+0x24>
	{
		g_FinshedCounting=1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 f7 00 	sts	0x00F7, r24
		g_tick = 0; //clear the tick counter again to count a new second
    12ea:	10 92 f6 00 	sts	0x00F6, r1
	}
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <CountByTimer1>:
 * INPUTS:
 * 		uint8 Seconds: Number of desired seconds to delay
 * OUTPUTS:	N/A
 */
void CountByTimer1(uint8 Seconds)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	2d 97       	sbiw	r28, 0x0d	; 13
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	88 87       	std	Y+8, r24	; 0x08
	Timer1_DeInit();
    130a:	0e 94 4d 18 	call	0x309a	; 0x309a <Timer1_DeInit>
	Timer1_ConfigType Timer1_Structure={COMPARE,F_CPU_1024,0,250};
    130e:	ce 01       	movw	r24, r28
    1310:	02 96       	adiw	r24, 0x02	; 2
    1312:	9a 87       	std	Y+10, r25	; 0x0a
    1314:	89 87       	std	Y+9, r24	; 0x09
    1316:	e0 ef       	ldi	r30, 0xF0	; 240
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	fc 87       	std	Y+12, r31	; 0x0c
    131c:	eb 87       	std	Y+11, r30	; 0x0b
    131e:	f6 e0       	ldi	r31, 0x06	; 6
    1320:	fd 87       	std	Y+13, r31	; 0x0d
    1322:	eb 85       	ldd	r30, Y+11	; 0x0b
    1324:	fc 85       	ldd	r31, Y+12	; 0x0c
    1326:	00 80       	ld	r0, Z
    1328:	8b 85       	ldd	r24, Y+11	; 0x0b
    132a:	9c 85       	ldd	r25, Y+12	; 0x0c
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	9c 87       	std	Y+12, r25	; 0x0c
    1330:	8b 87       	std	Y+11, r24	; 0x0b
    1332:	e9 85       	ldd	r30, Y+9	; 0x09
    1334:	fa 85       	ldd	r31, Y+10	; 0x0a
    1336:	00 82       	st	Z, r0
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	9a 87       	std	Y+10, r25	; 0x0a
    1340:	89 87       	std	Y+9, r24	; 0x09
    1342:	9d 85       	ldd	r25, Y+13	; 0x0d
    1344:	91 50       	subi	r25, 0x01	; 1
    1346:	9d 87       	std	Y+13, r25	; 0x0d
    1348:	ed 85       	ldd	r30, Y+13	; 0x0d
    134a:	ee 23       	and	r30, r30
    134c:	51 f7       	brne	.-44     	; 0x1322 <CountByTimer1+0x2e>
	Timer1_init(&Timer1_Structure);
    134e:	ce 01       	movw	r24, r28
    1350:	02 96       	adiw	r24, 0x02	; 2
    1352:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <Timer1_init>
	Timer1_setCallBack(TickCounter);
    1356:	85 e6       	ldi	r24, 0x65	; 101
    1358:	99 e0       	ldi	r25, 0x09	; 9
    135a:	0e 94 66 18 	call	0x30cc	; 0x30cc <Timer1_setCallBack>
	uint8 SecondsCounter=0;
    135e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
    {

		if(g_FinshedCounting==1){
    1360:	80 91 f7 00 	lds	r24, 0x00F7
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	29 f4       	brne	.+10     	; 0x1372 <CountByTimer1+0x7e>
			SecondsCounter++;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	89 83       	std	Y+1, r24	; 0x01
			g_FinshedCounting=0;
    136e:	10 92 f7 00 	sts	0x00F7, r1
		}

		if(SecondsCounter==Seconds){
    1372:	99 81       	ldd	r25, Y+1	; 0x01
    1374:	88 85       	ldd	r24, Y+8	; 0x08
    1376:	98 17       	cp	r25, r24
    1378:	99 f7       	brne	.-26     	; 0x1360 <CountByTimer1+0x6c>
			SecondsCounter=0;
    137a:	19 82       	std	Y+1, r1	; 0x01
			Timer1_DeInit();
    137c:	0e 94 4d 18 	call	0x309a	; 0x309a <Timer1_DeInit>
			return;
		}
    }
}
    1380:	2d 96       	adiw	r28, 0x0d	; 13
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <GPIO_setupPinDirection+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <GPIO_setupPinDirection+0x8>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
    13a4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	88 30       	cpi	r24, 0x08	; 8
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <GPIO_setupPinDirection+0x1c>
    13ac:	d5 c0       	rjmp	.+426    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <GPIO_setupPinDirection+0x24>
    13b4:	d1 c0       	rjmp	.+418    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3d 83       	std	Y+5, r19	; 0x05
    13be:	2c 83       	std	Y+4, r18	; 0x04
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 05       	cpc	r25, r1
    13c8:	09 f4       	brne	.+2      	; 0x13cc <GPIO_setupPinDirection+0x3a>
    13ca:	43 c0       	rjmp	.+134    	; 0x1452 <GPIO_setupPinDirection+0xc0>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <GPIO_setupPinDirection+0x4e>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	71 f0       	breq	.+28     	; 0x13fa <GPIO_setupPinDirection+0x68>
    13de:	bc c0       	rjmp	.+376    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <GPIO_setupPinDirection+0x5a>
    13ea:	5f c0       	rjmp	.+190    	; 0x14aa <GPIO_setupPinDirection+0x118>
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <GPIO_setupPinDirection+0x66>
    13f6:	85 c0       	rjmp	.+266    	; 0x1502 <GPIO_setupPinDirection+0x170>
    13f8:	af c0       	rjmp	.+350    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	a1 f4       	brne	.+40     	; 0x1428 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1400:	aa e3       	ldi	r26, 0x3A	; 58
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ea e3       	ldi	r30, 0x3A	; 58
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <GPIO_setupPinDirection+0x8c>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <GPIO_setupPinDirection+0x88>
    1422:	84 2b       	or	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	98 c0       	rjmp	.+304    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1428:	aa e3       	ldi	r26, 0x3A	; 58
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ea e3       	ldi	r30, 0x3A	; 58
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <GPIO_setupPinDirection+0xb4>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <GPIO_setupPinDirection+0xb0>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	83 c0       	rjmp	.+262    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	a1 f4       	brne	.+40     	; 0x1480 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1458:	a7 e3       	ldi	r26, 0x37	; 55
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e7 e3       	ldi	r30, 0x37	; 55
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <GPIO_setupPinDirection+0xe4>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <GPIO_setupPinDirection+0xe0>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	6c c0       	rjmp	.+216    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1480:	a7 e3       	ldi	r26, 0x37	; 55
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e7 e3       	ldi	r30, 0x37	; 55
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_setupPinDirection+0x10c>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_setupPinDirection+0x108>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	57 c0       	rjmp	.+174    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	a1 f4       	brne	.+40     	; 0x14d8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14b0:	a4 e3       	ldi	r26, 0x34	; 52
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e4 e3       	ldi	r30, 0x34	; 52
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_setupPinDirection+0x13c>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_setupPinDirection+0x138>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	40 c0       	rjmp	.+128    	; 0x1558 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14d8:	a4 e3       	ldi	r26, 0x34	; 52
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e4 e3       	ldi	r30, 0x34	; 52
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <GPIO_setupPinDirection+0x164>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <GPIO_setupPinDirection+0x160>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	2b c0       	rjmp	.+86     	; 0x1558 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	a1 f4       	brne	.+40     	; 0x1530 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1508:	a1 e3       	ldi	r26, 0x31	; 49
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <GPIO_setupPinDirection+0x194>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <GPIO_setupPinDirection+0x190>
    152a:	84 2b       	or	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	14 c0       	rjmp	.+40     	; 0x1558 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1530:	a1 e3       	ldi	r26, 0x31	; 49
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e1 e3       	ldi	r30, 0x31	; 49
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <GPIO_setupPinDirection+0x1bc>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <GPIO_setupPinDirection+0x1b8>
    1552:	80 95       	com	r24
    1554:	84 23       	and	r24, r20
    1556:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <GPIO_writePin+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <GPIO_writePin+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	6a 83       	std	Y+2, r22	; 0x02
    157a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	88 30       	cpi	r24, 0x08	; 8
    1580:	08 f0       	brcs	.+2      	; 0x1584 <GPIO_writePin+0x1c>
    1582:	d5 c0       	rjmp	.+426    	; 0x172e <GPIO_writePin+0x1c6>
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	08 f0       	brcs	.+2      	; 0x158c <GPIO_writePin+0x24>
    158a:	d1 c0       	rjmp	.+418    	; 0x172e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3d 83       	std	Y+5, r19	; 0x05
    1594:	2c 83       	std	Y+4, r18	; 0x04
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <GPIO_writePin+0x3a>
    15a0:	43 c0       	rjmp	.+134    	; 0x1628 <GPIO_writePin+0xc0>
    15a2:	2c 81       	ldd	r18, Y+4	; 0x04
    15a4:	3d 81       	ldd	r19, Y+5	; 0x05
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <GPIO_writePin+0x4e>
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <GPIO_writePin+0x68>
    15b4:	bc c0       	rjmp	.+376    	; 0x172e <GPIO_writePin+0x1c6>
    15b6:	2c 81       	ldd	r18, Y+4	; 0x04
    15b8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <GPIO_writePin+0x5a>
    15c0:	5f c0       	rjmp	.+190    	; 0x1680 <GPIO_writePin+0x118>
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <GPIO_writePin+0x66>
    15cc:	85 c0       	rjmp	.+266    	; 0x16d8 <GPIO_writePin+0x170>
    15ce:	af c0       	rjmp	.+350    	; 0x172e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15d6:	ab e3       	ldi	r26, 0x3B	; 59
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	eb e3       	ldi	r30, 0x3B	; 59
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <GPIO_writePin+0x8c>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <GPIO_writePin+0x88>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	98 c0       	rjmp	.+304    	; 0x172e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15fe:	ab e3       	ldi	r26, 0x3B	; 59
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	eb e3       	ldi	r30, 0x3B	; 59
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_writePin+0xb4>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_writePin+0xb0>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	83 c0       	rjmp	.+262    	; 0x172e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	a1 f4       	brne	.+40     	; 0x1656 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    162e:	a8 e3       	ldi	r26, 0x38	; 56
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e8 e3       	ldi	r30, 0x38	; 56
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <GPIO_writePin+0xe4>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <GPIO_writePin+0xe0>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	6c c0       	rjmp	.+216    	; 0x172e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1656:	a8 e3       	ldi	r26, 0x38	; 56
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 e3       	ldi	r30, 0x38	; 56
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_writePin+0x10c>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_writePin+0x108>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	57 c0       	rjmp	.+174    	; 0x172e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	a1 f4       	brne	.+40     	; 0x16ae <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1686:	a5 e3       	ldi	r26, 0x35	; 53
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e5 e3       	ldi	r30, 0x35	; 53
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_writePin+0x13c>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_writePin+0x138>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	40 c0       	rjmp	.+128    	; 0x172e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16ae:	a5 e3       	ldi	r26, 0x35	; 53
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_writePin+0x164>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_writePin+0x160>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	2b c0       	rjmp	.+86     	; 0x172e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	a1 f4       	brne	.+40     	; 0x1706 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16de:	a2 e3       	ldi	r26, 0x32	; 50
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e2 e3       	ldi	r30, 0x32	; 50
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 2e       	mov	r0, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <GPIO_writePin+0x194>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <GPIO_writePin+0x190>
    1700:	84 2b       	or	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	14 c0       	rjmp	.+40     	; 0x172e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1706:	a2 e3       	ldi	r26, 0x32	; 50
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e2 e3       	ldi	r30, 0x32	; 50
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <GPIO_writePin+0x1bc>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <GPIO_writePin+0x1b8>
    1728:	80 95       	com	r24
    172a:	84 23       	and	r24, r20
    172c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	00 d0       	rcall	.+0      	; 0x1744 <GPIO_readPin+0x6>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <GPIO_readPin+0x8>
    1746:	0f 92       	push	r0
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	8a 83       	std	Y+2, r24	; 0x02
    174e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1750:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 30       	cpi	r24, 0x08	; 8
    1756:	08 f0       	brcs	.+2      	; 0x175a <GPIO_readPin+0x1c>
    1758:	84 c0       	rjmp	.+264    	; 0x1862 <GPIO_readPin+0x124>
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	84 30       	cpi	r24, 0x04	; 4
    175e:	08 f0       	brcs	.+2      	; 0x1762 <GPIO_readPin+0x24>
    1760:	80 c0       	rjmp	.+256    	; 0x1862 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3d 83       	std	Y+5, r19	; 0x05
    176a:	2c 83       	std	Y+4, r18	; 0x04
    176c:	4c 81       	ldd	r20, Y+4	; 0x04
    176e:	5d 81       	ldd	r21, Y+5	; 0x05
    1770:	41 30       	cpi	r20, 0x01	; 1
    1772:	51 05       	cpc	r21, r1
    1774:	79 f1       	breq	.+94     	; 0x17d4 <GPIO_readPin+0x96>
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	9d 81       	ldd	r25, Y+5	; 0x05
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 05       	cpc	r25, r1
    177e:	34 f4       	brge	.+12     	; 0x178c <GPIO_readPin+0x4e>
    1780:	2c 81       	ldd	r18, Y+4	; 0x04
    1782:	3d 81       	ldd	r19, Y+5	; 0x05
    1784:	21 15       	cp	r18, r1
    1786:	31 05       	cpc	r19, r1
    1788:	69 f0       	breq	.+26     	; 0x17a4 <GPIO_readPin+0x66>
    178a:	6b c0       	rjmp	.+214    	; 0x1862 <GPIO_readPin+0x124>
    178c:	4c 81       	ldd	r20, Y+4	; 0x04
    178e:	5d 81       	ldd	r21, Y+5	; 0x05
    1790:	42 30       	cpi	r20, 0x02	; 2
    1792:	51 05       	cpc	r21, r1
    1794:	b9 f1       	breq	.+110    	; 0x1804 <GPIO_readPin+0xc6>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	83 30       	cpi	r24, 0x03	; 3
    179c:	91 05       	cpc	r25, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <GPIO_readPin+0x64>
    17a0:	49 c0       	rjmp	.+146    	; 0x1834 <GPIO_readPin+0xf6>
    17a2:	5f c0       	rjmp	.+190    	; 0x1862 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17a4:	e9 e3       	ldi	r30, 0x39	; 57
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a9 01       	movw	r20, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <GPIO_readPin+0x7e>
    17b8:	55 95       	asr	r21
    17ba:	47 95       	ror	r20
    17bc:	8a 95       	dec	r24
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <GPIO_readPin+0x7a>
    17c0:	ca 01       	movw	r24, r20
    17c2:	81 70       	andi	r24, 0x01	; 1
    17c4:	90 70       	andi	r25, 0x00	; 0
    17c6:	88 23       	and	r24, r24
    17c8:	19 f0       	breq	.+6      	; 0x17d0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	49 c0       	rjmp	.+146    	; 0x1862 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	47 c0       	rjmp	.+142    	; 0x1862 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17d4:	e6 e3       	ldi	r30, 0x36	; 54
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a9 01       	movw	r20, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <GPIO_readPin+0xae>
    17e8:	55 95       	asr	r21
    17ea:	47 95       	ror	r20
    17ec:	8a 95       	dec	r24
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <GPIO_readPin+0xaa>
    17f0:	ca 01       	movw	r24, r20
    17f2:	81 70       	andi	r24, 0x01	; 1
    17f4:	90 70       	andi	r25, 0x00	; 0
    17f6:	88 23       	and	r24, r24
    17f8:	19 f0       	breq	.+6      	; 0x1800 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	31 c0       	rjmp	.+98     	; 0x1862 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1800:	19 82       	std	Y+1, r1	; 0x01
    1802:	2f c0       	rjmp	.+94     	; 0x1862 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1804:	e3 e3       	ldi	r30, 0x33	; 51
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a9 01       	movw	r20, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_readPin+0xde>
    1818:	55 95       	asr	r21
    181a:	47 95       	ror	r20
    181c:	8a 95       	dec	r24
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_readPin+0xda>
    1820:	ca 01       	movw	r24, r20
    1822:	81 70       	andi	r24, 0x01	; 1
    1824:	90 70       	andi	r25, 0x00	; 0
    1826:	88 23       	and	r24, r24
    1828:	19 f0       	breq	.+6      	; 0x1830 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	19 c0       	rjmp	.+50     	; 0x1862 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	17 c0       	rjmp	.+46     	; 0x1862 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1834:	e0 e3       	ldi	r30, 0x30	; 48
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_readPin+0x10e>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_readPin+0x10a>
    1850:	ca 01       	movw	r24, r20
    1852:	81 70       	andi	r24, 0x01	; 1
    1854:	90 70       	andi	r25, 0x00	; 0
    1856:	88 23       	and	r24, r24
    1858:	19 f0       	breq	.+6      	; 0x1860 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1860:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	00 d0       	rcall	.+0      	; 0x187a <GPIO_setupPortDirection+0x6>
    187a:	00 d0       	rcall	.+0      	; 0x187c <GPIO_setupPortDirection+0x8>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	90 f5       	brcc	.+100    	; 0x18ee <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3c 83       	std	Y+4, r19	; 0x04
    1892:	2b 83       	std	Y+3, r18	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	d1 f0       	breq	.+52     	; 0x18d2 <GPIO_setupPortDirection+0x5e>
    189e:	2b 81       	ldd	r18, Y+3	; 0x03
    18a0:	3c 81       	ldd	r19, Y+4	; 0x04
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <GPIO_setupPortDirection+0x3e>
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <GPIO_setupPortDirection+0x54>
    18b0:	1e c0       	rjmp	.+60     	; 0x18ee <GPIO_setupPortDirection+0x7a>
    18b2:	2b 81       	ldd	r18, Y+3	; 0x03
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	81 f0       	breq	.+32     	; 0x18dc <GPIO_setupPortDirection+0x68>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	91 05       	cpc	r25, r1
    18c4:	81 f0       	breq	.+32     	; 0x18e6 <GPIO_setupPortDirection+0x72>
    18c6:	13 c0       	rjmp	.+38     	; 0x18ee <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18c8:	ea e3       	ldi	r30, 0x3A	; 58
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	80 83       	st	Z, r24
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18d2:	e7 e3       	ldi	r30, 0x37	; 55
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	80 83       	st	Z, r24
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18dc:	e4 e3       	ldi	r30, 0x34	; 52
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	80 83       	st	Z, r24
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18e6:	e1 e3       	ldi	r30, 0x31	; 49
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	80 83       	st	Z, r24
			break;
		}
	}
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	00 d0       	rcall	.+0      	; 0x1902 <GPIO_writePort+0x6>
    1902:	00 d0       	rcall	.+0      	; 0x1904 <GPIO_writePort+0x8>
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	90 f5       	brcc	.+100    	; 0x1976 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	3c 83       	std	Y+4, r19	; 0x04
    191a:	2b 83       	std	Y+3, r18	; 0x03
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	91 05       	cpc	r25, r1
    1924:	d1 f0       	breq	.+52     	; 0x195a <GPIO_writePort+0x5e>
    1926:	2b 81       	ldd	r18, Y+3	; 0x03
    1928:	3c 81       	ldd	r19, Y+4	; 0x04
    192a:	22 30       	cpi	r18, 0x02	; 2
    192c:	31 05       	cpc	r19, r1
    192e:	2c f4       	brge	.+10     	; 0x193a <GPIO_writePort+0x3e>
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	61 f0       	breq	.+24     	; 0x1950 <GPIO_writePort+0x54>
    1938:	1e c0       	rjmp	.+60     	; 0x1976 <GPIO_writePort+0x7a>
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	81 f0       	breq	.+32     	; 0x1964 <GPIO_writePort+0x68>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	91 05       	cpc	r25, r1
    194c:	81 f0       	breq	.+32     	; 0x196e <GPIO_writePort+0x72>
    194e:	13 c0       	rjmp	.+38     	; 0x1976 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1950:	eb e3       	ldi	r30, 0x3B	; 59
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	80 83       	st	Z, r24
    1958:	0e c0       	rjmp	.+28     	; 0x1976 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    195a:	e8 e3       	ldi	r30, 0x38	; 56
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 83       	st	Z, r24
    1962:	09 c0       	rjmp	.+18     	; 0x1976 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1964:	e5 e3       	ldi	r30, 0x35	; 53
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    196e:	e2 e3       	ldi	r30, 0x32	; 50
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 83       	st	Z, r24
			break;
		}
	}
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <GPIO_readPort+0x6>
    198a:	00 d0       	rcall	.+0      	; 0x198c <GPIO_readPort+0x8>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1992:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	90 f5       	brcc	.+100    	; 0x19fe <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3c 83       	std	Y+4, r19	; 0x04
    19a2:	2b 83       	std	Y+3, r18	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	91 05       	cpc	r25, r1
    19ac:	d1 f0       	breq	.+52     	; 0x19e2 <GPIO_readPort+0x5e>
    19ae:	2b 81       	ldd	r18, Y+3	; 0x03
    19b0:	3c 81       	ldd	r19, Y+4	; 0x04
    19b2:	22 30       	cpi	r18, 0x02	; 2
    19b4:	31 05       	cpc	r19, r1
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <GPIO_readPort+0x3e>
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	61 f0       	breq	.+24     	; 0x19d8 <GPIO_readPort+0x54>
    19c0:	1e c0       	rjmp	.+60     	; 0x19fe <GPIO_readPort+0x7a>
    19c2:	2b 81       	ldd	r18, Y+3	; 0x03
    19c4:	3c 81       	ldd	r19, Y+4	; 0x04
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	81 f0       	breq	.+32     	; 0x19ec <GPIO_readPort+0x68>
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	91 05       	cpc	r25, r1
    19d4:	81 f0       	breq	.+32     	; 0x19f6 <GPIO_readPort+0x72>
    19d6:	13 c0       	rjmp	.+38     	; 0x19fe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19d8:	e9 e3       	ldi	r30, 0x39	; 57
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	0e c0       	rjmp	.+28     	; 0x19fe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    19e2:	e6 e3       	ldi	r30, 0x36	; 54
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    19ec:	e3 e3       	ldi	r30, 0x33	; 51
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19f6:	e0 e3       	ldi	r30, 0x30	; 48
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <EEPROM_write>:
 *
 *******************************************************************************/

#include "internal_eeprom.h"

void EEPROM_write(unsigned short uiAddress, unsigned char ucData) {
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <EEPROM_write+0x6>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE)) ;
    1a20:	ec e3       	ldi	r30, 0x3C	; 60
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	82 70       	andi	r24, 0x02	; 2
    1a2c:	90 70       	andi	r25, 0x00	; 0
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	b9 f7       	brne	.-18     	; 0x1a20 <EEPROM_write+0x12>
	/* Set up address and data registers */
	EEAR = uiAddress; EEDR = ucData;
    1a32:	ee e3       	ldi	r30, 0x3E	; 62
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	ed e3       	ldi	r30, 0x3D	; 61
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    1a46:	ac e3       	ldi	r26, 0x3C	; 60
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ec e3       	ldi	r30, 0x3C	; 60
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	84 60       	ori	r24, 0x04	; 4
    1a52:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
    1a54:	ac e3       	ldi	r26, 0x3C	; 60
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ec e3       	ldi	r30, 0x3C	; 60
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	82 60       	ori	r24, 0x02	; 2
    1a60:	8c 93       	st	X, r24
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <EEPROM_read>:

unsigned char EEPROM_read(unsigned short uiAddress) {
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <EEPROM_read+0x6>
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE)) ;
    1a7c:	ec e3       	ldi	r30, 0x3C	; 60
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	82 70       	andi	r24, 0x02	; 2
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	b9 f7       	brne	.-18     	; 0x1a7c <EEPROM_read+0xe>
	/* Set up address register */
	EEAR = uiAddress;
    1a8e:	ee e3       	ldi	r30, 0x3E	; 62
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1a9a:	ac e3       	ldi	r26, 0x3C	; 60
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	ec e3       	ldi	r30, 0x3C	; 60
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	81 60       	ori	r24, 0x01	; 1
    1aa6:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    1aa8:	ed e3       	ldi	r30, 0x3D	; 61
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <KEYPAD_getPressedKey>:
 */
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number);
#endif

/*    Functions Definitions             */
uint8 KEYPAD_getPressedKey(void){
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <KEYPAD_getPressedKey+0x6>
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1ac2:	1a 82       	std	Y+2, r1	; 0x02
    1ac4:	4c c0       	rjmp	.+152    	; 0x1b5e <KEYPAD_getPressedKey+0xa6>
		{
			/* each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins */
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1ac6:	ea e3       	ldi	r30, 0x3A	; 58
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	80 e1       	ldi	r24, 0x10	; 16
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <KEYPAD_getPressedKey+0x22>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	2a 95       	dec	r18
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <KEYPAD_getPressedKey+0x1e>
    1ade:	80 83       	st	Z, r24
			
			/*  clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins*/
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1ae0:	eb e3       	ldi	r30, 0x3B	; 59
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	80 e1       	ldi	r24, 0x10	; 16
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <KEYPAD_getPressedKey+0x3e>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <KEYPAD_getPressedKey+0x3a>
    1afa:	80 95       	com	r24
    1afc:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1afe:	19 82       	std	Y+1, r1	; 0x01
    1b00:	28 c0       	rjmp	.+80     	; 0x1b52 <KEYPAD_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1b02:	e9 e3       	ldi	r30, 0x39	; 57
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <KEYPAD_getPressedKey+0x62>
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <KEYPAD_getPressedKey+0x5e>
    1b1e:	ca 01       	movw	r24, r20
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	90 70       	andi	r25, 0x00	; 0
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	91 f4       	brne	.+36     	; 0x1b4c <KEYPAD_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	98 2f       	mov	r25, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	89 0f       	add	r24, r25
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret
			
			/*  clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins*/
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 

			for(row=0;row<N_row;row++) /* loop for rows */
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	a8 f2       	brcs	.-86     	; 0x1b02 <KEYPAD_getPressedKey+0x4a>
/*    Functions Definitions             */
uint8 KEYPAD_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	08 f4       	brcc	.+2      	; 0x1b66 <KEYPAD_getPressedKey+0xae>
    1b64:	b0 cf       	rjmp	.-160    	; 0x1ac6 <KEYPAD_getPressedKey+0xe>
    1b66:	ad cf       	rjmp	.-166    	; 0x1ac2 <KEYPAD_getPressedKey+0xa>

00001b68 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <KeyPad_4x4_adjustKeyNumber+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <KeyPad_4x4_adjustKeyNumber+0x8>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3c 83       	std	Y+4, r19	; 0x04
    1b7e:	2b 83       	std	Y+3, r18	; 0x03
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	88 30       	cpi	r24, 0x08	; 8
    1b86:	91 05       	cpc	r25, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <KeyPad_4x4_adjustKeyNumber+0x24>
    1b8a:	70 c0       	rjmp	.+224    	; 0x1c6c <KeyPad_4x4_adjustKeyNumber+0x104>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	29 30       	cpi	r18, 0x09	; 9
    1b92:	31 05       	cpc	r19, r1
    1b94:	5c f5       	brge	.+86     	; 0x1bec <KeyPad_4x4_adjustKeyNumber+0x84>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1ba0:	59 c0       	rjmp	.+178    	; 0x1c54 <KeyPad_4x4_adjustKeyNumber+0xec>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	25 30       	cpi	r18, 0x05	; 5
    1ba8:	31 05       	cpc	r19, r1
    1baa:	9c f4       	brge	.+38     	; 0x1bd2 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <KeyPad_4x4_adjustKeyNumber+0x50>
    1bb6:	48 c0       	rjmp	.+144    	; 0x1c48 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	23 30       	cpi	r18, 0x03	; 3
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	0c f0       	brlt	.+2      	; 0x1bc4 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1bc2:	45 c0       	rjmp	.+138    	; 0x1c4e <KeyPad_4x4_adjustKeyNumber+0xe6>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <KeyPad_4x4_adjustKeyNumber+0x68>
    1bce:	39 c0       	rjmp	.+114    	; 0x1c42 <KeyPad_4x4_adjustKeyNumber+0xda>
    1bd0:	67 c0       	rjmp	.+206    	; 0x1ca0 <KeyPad_4x4_adjustKeyNumber+0x138>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	26 30       	cpi	r18, 0x06	; 6
    1bd8:	31 05       	cpc	r19, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <KeyPad_4x4_adjustKeyNumber+0x76>
    1bdc:	41 c0       	rjmp	.+130    	; 0x1c60 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	87 30       	cpi	r24, 0x07	; 7
    1be4:	91 05       	cpc	r25, r1
    1be6:	0c f0       	brlt	.+2      	; 0x1bea <KeyPad_4x4_adjustKeyNumber+0x82>
    1be8:	3e c0       	rjmp	.+124    	; 0x1c66 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1bea:	37 c0       	rjmp	.+110    	; 0x1c5a <KeyPad_4x4_adjustKeyNumber+0xf2>
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	2c 30       	cpi	r18, 0x0C	; 12
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <KeyPad_4x4_adjustKeyNumber+0x90>
    1bf6:	46 c0       	rjmp	.+140    	; 0x1c84 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	8d 30       	cpi	r24, 0x0D	; 13
    1bfe:	91 05       	cpc	r25, r1
    1c00:	5c f4       	brge	.+22     	; 0x1c18 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	2a 30       	cpi	r18, 0x0A	; 10
    1c08:	31 05       	cpc	r19, r1
    1c0a:	b1 f1       	breq	.+108    	; 0x1c78 <KeyPad_4x4_adjustKeyNumber+0x110>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	8b 30       	cpi	r24, 0x0B	; 11
    1c12:	91 05       	cpc	r25, r1
    1c14:	a4 f5       	brge	.+104    	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x116>
    1c16:	2d c0       	rjmp	.+90     	; 0x1c72 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	2e 30       	cpi	r18, 0x0E	; 14
    1c1e:	31 05       	cpc	r19, r1
    1c20:	b9 f1       	breq	.+110    	; 0x1c90 <KeyPad_4x4_adjustKeyNumber+0x128>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	8e 30       	cpi	r24, 0x0E	; 14
    1c28:	91 05       	cpc	r25, r1
    1c2a:	7c f1       	brlt	.+94     	; 0x1c8a <KeyPad_4x4_adjustKeyNumber+0x122>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	2f 30       	cpi	r18, 0x0F	; 15
    1c32:	31 05       	cpc	r19, r1
    1c34:	79 f1       	breq	.+94     	; 0x1c94 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	80 31       	cpi	r24, 0x10	; 16
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	69 f1       	breq	.+90     	; 0x1c9a <KeyPad_4x4_adjustKeyNumber+0x132>
    1c40:	2f c0       	rjmp	.+94     	; 0x1ca0 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1c42:	97 e0       	ldi	r25, 0x07	; 7
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	2e c0       	rjmp	.+92     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1c48:	28 e0       	ldi	r18, 0x08	; 8
    1c4a:	2a 83       	std	Y+2, r18	; 0x02
    1c4c:	2b c0       	rjmp	.+86     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1c4e:	39 e0       	ldi	r19, 0x09	; 9
    1c50:	3a 83       	std	Y+2, r19	; 0x02
    1c52:	28 c0       	rjmp	.+80     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1c54:	85 e2       	ldi	r24, 0x25	; 37
    1c56:	8a 83       	std	Y+2, r24	; 0x02
    1c58:	25 c0       	rjmp	.+74     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1c5a:	94 e0       	ldi	r25, 0x04	; 4
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	22 c0       	rjmp	.+68     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1c60:	25 e0       	ldi	r18, 0x05	; 5
    1c62:	2a 83       	std	Y+2, r18	; 0x02
    1c64:	1f c0       	rjmp	.+62     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1c66:	36 e0       	ldi	r19, 0x06	; 6
    1c68:	3a 83       	std	Y+2, r19	; 0x02
    1c6a:	1c c0       	rjmp	.+56     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1c6c:	8a e2       	ldi	r24, 0x2A	; 42
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
    1c70:	19 c0       	rjmp	.+50     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	16 c0       	rjmp	.+44     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1c78:	22 e0       	ldi	r18, 0x02	; 2
    1c7a:	2a 83       	std	Y+2, r18	; 0x02
    1c7c:	13 c0       	rjmp	.+38     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1c7e:	33 e0       	ldi	r19, 0x03	; 3
    1c80:	3a 83       	std	Y+2, r19	; 0x02
    1c82:	10 c0       	rjmp	.+32     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1c84:	8d e2       	ldi	r24, 0x2D	; 45
    1c86:	8a 83       	std	Y+2, r24	; 0x02
    1c88:	0d c0       	rjmp	.+26     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1c8a:	9d e0       	ldi	r25, 0x0D	; 13
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	0a c0       	rjmp	.+20     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1c90:	1a 82       	std	Y+2, r1	; 0x02
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1c94:	2d e3       	ldi	r18, 0x3D	; 61
    1c96:	2a 83       	std	Y+2, r18	; 0x02
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1c9a:	3b e2       	ldi	r19, 0x2B	; 43
    1c9c:	3a 83       	std	Y+2, r19	; 0x02
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	8a 83       	std	Y+2, r24	; 0x02
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1cbc:	a1 e3       	ldi	r26, 0x31	; 49
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e1 e3       	ldi	r30, 0x31	; 49
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 67       	ori	r24, 0x70	; 112
    1cc8:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1cca:	a4 e3       	ldi	r26, 0x34	; 52
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e4 e3       	ldi	r30, 0x34	; 52
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 6f       	ori	r24, 0xF0	; 240
    1cd6:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1cde:	88 e2       	ldi	r24, 0x28	; 40
    1ce0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1ce4:	8c e0       	ldi	r24, 0x0C	; 12
    1ce6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	c3 56       	subi	r28, 0x63	; 99
    1d04:	d0 40       	sbci	r29, 0x00	; 0
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	fe 01       	movw	r30, r28
    1d12:	ed 59       	subi	r30, 0x9D	; 157
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1d18:	a2 e3       	ldi	r26, 0x32	; 50
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 7e       	andi	r24, 0xEF	; 239
    1d24:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1d26:	a2 e3       	ldi	r26, 0x32	; 50
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e2 e3       	ldi	r30, 0x32	; 50
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 7d       	andi	r24, 0xDF	; 223
    1d32:	8c 93       	st	X, r24
    1d34:	fe 01       	movw	r30, r28
    1d36:	e1 5a       	subi	r30, 0xA1	; 161
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	80 83       	st	Z, r24
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	a2 83       	std	Z+2, r26	; 0x02
    1d48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	05 5a       	subi	r16, 0xA5	; 165
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	fe 01       	movw	r30, r28
    1d52:	e1 5a       	subi	r30, 0xA1	; 161
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a ef       	ldi	r20, 0xFA	; 250
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e5 5a       	subi	r30, 0xA5	; 165
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	44 f4       	brge	.+16     	; 0x1da6 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1d96:	fe 01       	movw	r30, r28
    1d98:	e7 5a       	subi	r30, 0xA7	; 167
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	64 c0       	rjmp	.+200    	; 0x1e6e <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1da6:	fe 01       	movw	r30, r28
    1da8:	e5 5a       	subi	r30, 0xA5	; 165
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	0c f0       	brlt	.+2      	; 0x1dc6 <LCD_sendCommand+0xd0>
    1dc4:	43 c0       	rjmp	.+134    	; 0x1e4c <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e1 5a       	subi	r30, 0xA1	; 161
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8e 01       	movw	r16, r28
    1de6:	07 5a       	subi	r16, 0xA7	; 167
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
    1dfc:	1f c0       	rjmp	.+62     	; 0x1e3c <LCD_sendCommand+0x146>
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e9 5a       	subi	r30, 0xA9	; 169
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e9 5a       	subi	r30, 0xA9	; 169
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_sendCommand+0x120>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e9 5a       	subi	r30, 0xA9	; 169
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	de 01       	movw	r26, r28
    1e26:	a7 5a       	subi	r26, 0xA7	; 167
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e7 5a       	subi	r30, 0xA7	; 167
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	11 96       	adiw	r26, 0x01	; 1
    1e38:	9c 93       	st	X, r25
    1e3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e7 5a       	subi	r30, 0xA7	; 167
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	91 81       	ldd	r25, Z+1	; 0x01
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	d1 f6       	brne	.-76     	; 0x1dfe <LCD_sendCommand+0x108>
    1e4a:	27 c0       	rjmp	.+78     	; 0x1e9a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	07 5a       	subi	r16, 0xA7	; 167
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e5 5a       	subi	r30, 0xA5	; 165
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	f8 01       	movw	r30, r16
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	de 01       	movw	r26, r28
    1e70:	ab 5a       	subi	r26, 0xAB	; 171
    1e72:	bf 4f       	sbci	r27, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	e7 5a       	subi	r30, 0xA7	; 167
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	8d 93       	st	X+, r24
    1e80:	9c 93       	st	X, r25
    1e82:	fe 01       	movw	r30, r28
    1e84:	eb 5a       	subi	r30, 0xAB	; 171
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_sendCommand+0x196>
    1e90:	fe 01       	movw	r30, r28
    1e92:	eb 5a       	subi	r30, 0xAB	; 171
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e9a:	a2 e3       	ldi	r26, 0x32	; 50
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 64       	ori	r24, 0x40	; 64
    1ea6:	8c 93       	st	X, r24
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	ef 5a       	subi	r30, 0xAF	; 175
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a0 e8       	ldi	r26, 0x80	; 128
    1eb4:	bf e3       	ldi	r27, 0x3F	; 63
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	8e 01       	movw	r16, r28
    1ec0:	03 5b       	subi	r16, 0xB3	; 179
    1ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ef 5a       	subi	r30, 0xAF	; 175
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	60 81       	ld	r22, Z
    1ecc:	71 81       	ldd	r23, Z+1	; 0x01
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a ef       	ldi	r20, 0xFA	; 250
    1ed8:	54 e4       	ldi	r21, 0x44	; 68
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	80 83       	st	Z, r24
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	a2 83       	std	Z+2, r26	; 0x02
    1eea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eec:	fe 01       	movw	r30, r28
    1eee:	e3 5b       	subi	r30, 0xB3	; 179
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	60 81       	ld	r22, Z
    1ef4:	71 81       	ldd	r23, Z+1	; 0x01
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	44 f4       	brge	.+16     	; 0x1f1a <LCD_sendCommand+0x224>
		__ticks = 1;
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e5 5b       	subi	r30, 0xB5	; 181
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
    1f18:	64 c0       	rjmp	.+200    	; 0x1fe2 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e3 5b       	subi	r30, 0xB3	; 179
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	60 81       	ld	r22, Z
    1f22:	71 81       	ldd	r23, Z+1	; 0x01
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	57 e4       	ldi	r21, 0x47	; 71
    1f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f34:	18 16       	cp	r1, r24
    1f36:	0c f0       	brlt	.+2      	; 0x1f3a <LCD_sendCommand+0x244>
    1f38:	43 c0       	rjmp	.+134    	; 0x1fc0 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ef 5a       	subi	r30, 0xAF	; 175
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e2       	ldi	r20, 0x20	; 32
    1f4e:	51 e4       	ldi	r21, 0x41	; 65
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8e 01       	movw	r16, r28
    1f5a:	05 5b       	subi	r16, 0xB5	; 181
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	1f c0       	rjmp	.+62     	; 0x1fb0 <LCD_sendCommand+0x2ba>
    1f72:	fe 01       	movw	r30, r28
    1f74:	e7 5b       	subi	r30, 0xB7	; 183
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	88 ec       	ldi	r24, 0xC8	; 200
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	fe 01       	movw	r30, r28
    1f82:	e7 5b       	subi	r30, 0xB7	; 183
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_sendCommand+0x294>
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e7 5b       	subi	r30, 0xB7	; 183
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	de 01       	movw	r26, r28
    1f9a:	a5 5b       	subi	r26, 0xB5	; 181
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e5 5b       	subi	r30, 0xB5	; 181
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	11 96       	adiw	r26, 0x01	; 1
    1fac:	9c 93       	st	X, r25
    1fae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e5 5b       	subi	r30, 0xB5	; 181
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	d1 f6       	brne	.-76     	; 0x1f72 <LCD_sendCommand+0x27c>
    1fbe:	27 c0       	rjmp	.+78     	; 0x200e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc0:	8e 01       	movw	r16, r28
    1fc2:	05 5b       	subi	r16, 0xB5	; 181
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e3 5b       	subi	r30, 0xB3	; 179
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	f8 01       	movw	r30, r16
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	de 01       	movw	r26, r28
    1fe4:	a9 5b       	subi	r26, 0xB9	; 185
    1fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e5 5b       	subi	r30, 0xB5	; 181
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	8d 93       	st	X+, r24
    1ff4:	9c 93       	st	X, r25
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e9 5b       	subi	r30, 0xB9	; 185
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_sendCommand+0x30a>
    2004:	fe 01       	movw	r30, r28
    2006:	e9 5b       	subi	r30, 0xB9	; 185
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    200e:	a5 e3       	ldi	r26, 0x35	; 53
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e5 e3       	ldi	r30, 0x35	; 53
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	98 2f       	mov	r25, r24
    201a:	9f 70       	andi	r25, 0x0F	; 15
    201c:	fe 01       	movw	r30, r28
    201e:	ed 59       	subi	r30, 0x9D	; 157
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	80 7f       	andi	r24, 0xF0	; 240
    2026:	89 2b       	or	r24, r25
    2028:	8c 93       	st	X, r24
    202a:	fe 01       	movw	r30, r28
    202c:	ed 5b       	subi	r30, 0xBD	; 189
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e8       	ldi	r26, 0x80	; 128
    2036:	bf e3       	ldi	r27, 0x3F	; 63
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	8e 01       	movw	r16, r28
    2042:	01 5c       	subi	r16, 0xC1	; 193
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	ed 5b       	subi	r30, 0xBD	; 189
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	f8 01       	movw	r30, r16
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	a2 83       	std	Z+2, r26	; 0x02
    206c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206e:	fe 01       	movw	r30, r28
    2070:	ff 96       	adiw	r30, 0x3f	; 63
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_sendCommand+0x39e>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e af       	std	Y+62, r25	; 0x3e
    2090:	8d af       	std	Y+61, r24	; 0x3d
    2092:	46 c0       	rjmp	.+140    	; 0x2120 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    2094:	fe 01       	movw	r30, r28
    2096:	ff 96       	adiw	r30, 0x3f	; 63
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	64 f5       	brge	.+88     	; 0x2108 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	fe 01       	movw	r30, r28
    20b2:	ed 5b       	subi	r30, 0xBD	; 189
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e2       	ldi	r20, 0x20	; 32
    20c4:	51 e4       	ldi	r21, 0x41	; 65
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9e af       	std	Y+62, r25	; 0x3e
    20dc:	8d af       	std	Y+61, r24	; 0x3d
    20de:	0f c0       	rjmp	.+30     	; 0x20fe <LCD_sendCommand+0x408>
    20e0:	88 ec       	ldi	r24, 0xC8	; 200
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	9c af       	std	Y+60, r25	; 0x3c
    20e6:	8b af       	std	Y+59, r24	; 0x3b
    20e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    20ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_sendCommand+0x3f6>
    20f0:	9c af       	std	Y+60, r25	; 0x3c
    20f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	9e af       	std	Y+62, r25	; 0x3e
    20fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2100:	9e ad       	ldd	r25, Y+62	; 0x3e
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	69 f7       	brne	.-38     	; 0x20e0 <LCD_sendCommand+0x3ea>
    2106:	16 c0       	rjmp	.+44     	; 0x2134 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2108:	fe 01       	movw	r30, r28
    210a:	ff 96       	adiw	r30, 0x3f	; 63
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9e af       	std	Y+62, r25	; 0x3e
    211e:	8d af       	std	Y+61, r24	; 0x3d
    2120:	8d ad       	ldd	r24, Y+61	; 0x3d
    2122:	9e ad       	ldd	r25, Y+62	; 0x3e
    2124:	9a af       	std	Y+58, r25	; 0x3a
    2126:	89 af       	std	Y+57, r24	; 0x39
    2128:	89 ad       	ldd	r24, Y+57	; 0x39
    212a:	9a ad       	ldd	r25, Y+58	; 0x3a
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_sendCommand+0x436>
    2130:	9a af       	std	Y+58, r25	; 0x3a
    2132:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2134:	a2 e3       	ldi	r26, 0x32	; 50
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e2 e3       	ldi	r30, 0x32	; 50
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8f 7b       	andi	r24, 0xBF	; 191
    2140:	8c 93       	st	X, r24
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a0 e8       	ldi	r26, 0x80	; 128
    2148:	bf e3       	ldi	r27, 0x3F	; 63
    214a:	8d ab       	std	Y+53, r24	; 0x35
    214c:	9e ab       	std	Y+54, r25	; 0x36
    214e:	af ab       	std	Y+55, r26	; 0x37
    2150:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2152:	6d a9       	ldd	r22, Y+53	; 0x35
    2154:	7e a9       	ldd	r23, Y+54	; 0x36
    2156:	8f a9       	ldd	r24, Y+55	; 0x37
    2158:	98 ad       	ldd	r25, Y+56	; 0x38
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4a ef       	ldi	r20, 0xFA	; 250
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	89 ab       	std	Y+49, r24	; 0x31
    216c:	9a ab       	std	Y+50, r25	; 0x32
    216e:	ab ab       	std	Y+51, r26	; 0x33
    2170:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2172:	69 a9       	ldd	r22, Y+49	; 0x31
    2174:	7a a9       	ldd	r23, Y+50	; 0x32
    2176:	8b a9       	ldd	r24, Y+51	; 0x33
    2178:	9c a9       	ldd	r25, Y+52	; 0x34
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e8       	ldi	r20, 0x80	; 128
    2180:	5f e3       	ldi	r21, 0x3F	; 63
    2182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2186:	88 23       	and	r24, r24
    2188:	2c f4       	brge	.+10     	; 0x2194 <LCD_sendCommand+0x49e>
		__ticks = 1;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	98 ab       	std	Y+48, r25	; 0x30
    2190:	8f a7       	std	Y+47, r24	; 0x2f
    2192:	3f c0       	rjmp	.+126    	; 0x2212 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    2194:	69 a9       	ldd	r22, Y+49	; 0x31
    2196:	7a a9       	ldd	r23, Y+50	; 0x32
    2198:	8b a9       	ldd	r24, Y+51	; 0x33
    219a:	9c a9       	ldd	r25, Y+52	; 0x34
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	57 e4       	ldi	r21, 0x47	; 71
    21a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	4c f5       	brge	.+82     	; 0x21fe <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ac:	6d a9       	ldd	r22, Y+53	; 0x35
    21ae:	7e a9       	ldd	r23, Y+54	; 0x36
    21b0:	8f a9       	ldd	r24, Y+55	; 0x37
    21b2:	98 ad       	ldd	r25, Y+56	; 0x38
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e2       	ldi	r20, 0x20	; 32
    21ba:	51 e4       	ldi	r21, 0x41	; 65
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
    21d4:	0f c0       	rjmp	.+30     	; 0x21f4 <LCD_sendCommand+0x4fe>
    21d6:	88 ec       	ldi	r24, 0xC8	; 200
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9e a7       	std	Y+46, r25	; 0x2e
    21dc:	8d a7       	std	Y+45, r24	; 0x2d
    21de:	8d a5       	ldd	r24, Y+45	; 0x2d
    21e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_sendCommand+0x4ec>
    21e6:	9e a7       	std	Y+46, r25	; 0x2e
    21e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ec:	98 a9       	ldd	r25, Y+48	; 0x30
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	98 ab       	std	Y+48, r25	; 0x30
    21f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f6:	98 a9       	ldd	r25, Y+48	; 0x30
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	69 f7       	brne	.-38     	; 0x21d6 <LCD_sendCommand+0x4e0>
    21fc:	14 c0       	rjmp	.+40     	; 0x2226 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2200:	7a a9       	ldd	r23, Y+50	; 0x32
    2202:	8b a9       	ldd	r24, Y+51	; 0x33
    2204:	9c a9       	ldd	r25, Y+52	; 0x34
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	98 ab       	std	Y+48, r25	; 0x30
    2210:	8f a7       	std	Y+47, r24	; 0x2f
    2212:	8f a5       	ldd	r24, Y+47	; 0x2f
    2214:	98 a9       	ldd	r25, Y+48	; 0x30
    2216:	9c a7       	std	Y+44, r25	; 0x2c
    2218:	8b a7       	std	Y+43, r24	; 0x2b
    221a:	8b a5       	ldd	r24, Y+43	; 0x2b
    221c:	9c a5       	ldd	r25, Y+44	; 0x2c
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_sendCommand+0x528>
    2222:	9c a7       	std	Y+44, r25	; 0x2c
    2224:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2226:	a2 e3       	ldi	r26, 0x32	; 50
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e2 e3       	ldi	r30, 0x32	; 50
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 64       	ori	r24, 0x40	; 64
    2232:	8c 93       	st	X, r24
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e8       	ldi	r26, 0x80	; 128
    223a:	bf e3       	ldi	r27, 0x3F	; 63
    223c:	8f a3       	std	Y+39, r24	; 0x27
    223e:	98 a7       	std	Y+40, r25	; 0x28
    2240:	a9 a7       	std	Y+41, r26	; 0x29
    2242:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	6f a1       	ldd	r22, Y+39	; 0x27
    2246:	78 a5       	ldd	r23, Y+40	; 0x28
    2248:	89 a5       	ldd	r24, Y+41	; 0x29
    224a:	9a a5       	ldd	r25, Y+42	; 0x2a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a ef       	ldi	r20, 0xFA	; 250
    2252:	54 e4       	ldi	r21, 0x44	; 68
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8b a3       	std	Y+35, r24	; 0x23
    225e:	9c a3       	std	Y+36, r25	; 0x24
    2260:	ad a3       	std	Y+37, r26	; 0x25
    2262:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2264:	6b a1       	ldd	r22, Y+35	; 0x23
    2266:	7c a1       	ldd	r23, Y+36	; 0x24
    2268:	8d a1       	ldd	r24, Y+37	; 0x25
    226a:	9e a1       	ldd	r25, Y+38	; 0x26
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_sendCommand+0x590>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9a a3       	std	Y+34, r25	; 0x22
    2282:	89 a3       	std	Y+33, r24	; 0x21
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    2286:	6b a1       	ldd	r22, Y+35	; 0x23
    2288:	7c a1       	ldd	r23, Y+36	; 0x24
    228a:	8d a1       	ldd	r24, Y+37	; 0x25
    228c:	9e a1       	ldd	r25, Y+38	; 0x26
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	6f a1       	ldd	r22, Y+39	; 0x27
    22a0:	78 a5       	ldd	r23, Y+40	; 0x28
    22a2:	89 a5       	ldd	r24, Y+41	; 0x29
    22a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_sendCommand+0x5f0>
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	98 a3       	std	Y+32, r25	; 0x20
    22ce:	8f 8f       	std	Y+31, r24	; 0x1f
    22d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d2:	98 a1       	ldd	r25, Y+32	; 0x20
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_sendCommand+0x5de>
    22d8:	98 a3       	std	Y+32, r25	; 0x20
    22da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	89 a1       	ldd	r24, Y+33	; 0x21
    22de:	9a a1       	ldd	r25, Y+34	; 0x22
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9a a3       	std	Y+34, r25	; 0x22
    22e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	89 a1       	ldd	r24, Y+33	; 0x21
    22e8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_sendCommand+0x5d2>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6b a1       	ldd	r22, Y+35	; 0x23
    22f2:	7c a1       	ldd	r23, Y+36	; 0x24
    22f4:	8d a1       	ldd	r24, Y+37	; 0x25
    22f6:	9e a1       	ldd	r25, Y+38	; 0x26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9a a3       	std	Y+34, r25	; 0x22
    2302:	89 a3       	std	Y+33, r24	; 0x21
    2304:	89 a1       	ldd	r24, Y+33	; 0x21
    2306:	9a a1       	ldd	r25, Y+34	; 0x22
    2308:	9e 8f       	std	Y+30, r25	; 0x1e
    230a:	8d 8f       	std	Y+29, r24	; 0x1d
    230c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_sendCommand+0x61a>
    2314:	9e 8f       	std	Y+30, r25	; 0x1e
    2316:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2318:	a5 e3       	ldi	r26, 0x35	; 53
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e5 e3       	ldi	r30, 0x35	; 53
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	28 2f       	mov	r18, r24
    2324:	2f 70       	andi	r18, 0x0F	; 15
    2326:	fe 01       	movw	r30, r28
    2328:	ed 59       	subi	r30, 0x9D	; 157
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	82 95       	swap	r24
    2334:	92 95       	swap	r25
    2336:	90 7f       	andi	r25, 0xF0	; 240
    2338:	98 27       	eor	r25, r24
    233a:	80 7f       	andi	r24, 0xF0	; 240
    233c:	98 27       	eor	r25, r24
    233e:	82 2b       	or	r24, r18
    2340:	8c 93       	st	X, r24
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e8       	ldi	r26, 0x80	; 128
    2348:	bf e3       	ldi	r27, 0x3F	; 63
    234a:	89 8f       	std	Y+25, r24	; 0x19
    234c:	9a 8f       	std	Y+26, r25	; 0x1a
    234e:	ab 8f       	std	Y+27, r26	; 0x1b
    2350:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	69 8d       	ldd	r22, Y+25	; 0x19
    2354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a ef       	ldi	r20, 0xFA	; 250
    2360:	54 e4       	ldi	r21, 0x44	; 68
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8d 8b       	std	Y+21, r24	; 0x15
    236c:	9e 8b       	std	Y+22, r25	; 0x16
    236e:	af 8b       	std	Y+23, r26	; 0x17
    2370:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2372:	6d 89       	ldd	r22, Y+21	; 0x15
    2374:	7e 89       	ldd	r23, Y+22	; 0x16
    2376:	8f 89       	ldd	r24, Y+23	; 0x17
    2378:	98 8d       	ldd	r25, Y+24	; 0x18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <LCD_sendCommand+0x69e>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	69 8d       	ldd	r22, Y+25	; 0x19
    23ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <LCD_sendCommand+0x6fe>
    23d6:	88 ec       	ldi	r24, 0xC8	; 200
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9a 8b       	std	Y+18, r25	; 0x12
    23dc:	89 8b       	std	Y+17, r24	; 0x11
    23de:	89 89       	ldd	r24, Y+17	; 0x11
    23e0:	9a 89       	ldd	r25, Y+18	; 0x12
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_sendCommand+0x6ec>
    23e6:	9a 8b       	std	Y+18, r25	; 0x12
    23e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	9c 89       	ldd	r25, Y+20	; 0x14
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <LCD_sendCommand+0x6e0>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	8b 89       	ldd	r24, Y+19	; 0x13
    2414:	9c 89       	ldd	r25, Y+20	; 0x14
    2416:	98 8b       	std	Y+16, r25	; 0x10
    2418:	8f 87       	std	Y+15, r24	; 0x0f
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	98 89       	ldd	r25, Y+16	; 0x10
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_sendCommand+0x728>
    2422:	98 8b       	std	Y+16, r25	; 0x10
    2424:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2426:	a2 e3       	ldi	r26, 0x32	; 50
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e2 e3       	ldi	r30, 0x32	; 50
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8f 7b       	andi	r24, 0xBF	; 191
    2432:	8c 93       	st	X, r24
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a0 e8       	ldi	r26, 0x80	; 128
    243a:	bf e3       	ldi	r27, 0x3F	; 63
    243c:	8b 87       	std	Y+11, r24	; 0x0b
    243e:	9c 87       	std	Y+12, r25	; 0x0c
    2440:	ad 87       	std	Y+13, r26	; 0x0d
    2442:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2444:	6b 85       	ldd	r22, Y+11	; 0x0b
    2446:	7c 85       	ldd	r23, Y+12	; 0x0c
    2448:	8d 85       	ldd	r24, Y+13	; 0x0d
    244a:	9e 85       	ldd	r25, Y+14	; 0x0e
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	4a ef       	ldi	r20, 0xFA	; 250
    2452:	54 e4       	ldi	r21, 0x44	; 68
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	8f 83       	std	Y+7, r24	; 0x07
    245e:	98 87       	std	Y+8, r25	; 0x08
    2460:	a9 87       	std	Y+9, r26	; 0x09
    2462:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2464:	6f 81       	ldd	r22, Y+7	; 0x07
    2466:	78 85       	ldd	r23, Y+8	; 0x08
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e8       	ldi	r20, 0x80	; 128
    2472:	5f e3       	ldi	r21, 0x3F	; 63
    2474:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2478:	88 23       	and	r24, r24
    247a:	2c f4       	brge	.+10     	; 0x2486 <LCD_sendCommand+0x790>
		__ticks = 1;
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9e 83       	std	Y+6, r25	; 0x06
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	3f c0       	rjmp	.+126    	; 0x2504 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	3f ef       	ldi	r19, 0xFF	; 255
    2492:	4f e7       	ldi	r20, 0x7F	; 127
    2494:	57 e4       	ldi	r21, 0x47	; 71
    2496:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249a:	18 16       	cp	r1, r24
    249c:	4c f5       	brge	.+82     	; 0x24f0 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249e:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e2       	ldi	r20, 0x20	; 32
    24ac:	51 e4       	ldi	r21, 0x41	; 65
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <LCD_sendCommand+0x7f0>
    24c8:	88 ec       	ldi	r24, 0xC8	; 200
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9c 83       	std	Y+4, r25	; 0x04
    24ce:	8b 83       	std	Y+3, r24	; 0x03
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <LCD_sendCommand+0x7de>
    24d8:	9c 83       	std	Y+4, r25	; 0x04
    24da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	9e 81       	ldd	r25, Y+6	; 0x06
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	69 f7       	brne	.-38     	; 0x24c8 <LCD_sendCommand+0x7d2>
    24ee:	14 c0       	rjmp	.+40     	; 0x2518 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	9a 81       	ldd	r25, Y+2	; 0x02
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_sendCommand+0x81a>
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2518:	cd 59       	subi	r28, 0x9D	; 157
    251a:	df 4f       	sbci	r29, 0xFF	; 255
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	c3 56       	subi	r28, 0x63	; 99
    253e:	d0 40       	sbci	r29, 0x00	; 0
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	fe 01       	movw	r30, r28
    254c:	ed 59       	subi	r30, 0x9D	; 157
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2552:	a2 e3       	ldi	r26, 0x32	; 50
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e2 e3       	ldi	r30, 0x32	; 50
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	80 61       	ori	r24, 0x10	; 16
    255e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2560:	a2 e3       	ldi	r26, 0x32	; 50
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e2 e3       	ldi	r30, 0x32	; 50
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	8f 7d       	andi	r24, 0xDF	; 223
    256c:	8c 93       	st	X, r24
    256e:	fe 01       	movw	r30, r28
    2570:	e1 5a       	subi	r30, 0xA1	; 161
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e8       	ldi	r26, 0x80	; 128
    257a:	bf e3       	ldi	r27, 0x3F	; 63
    257c:	80 83       	st	Z, r24
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	a2 83       	std	Z+2, r26	; 0x02
    2582:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2584:	8e 01       	movw	r16, r28
    2586:	05 5a       	subi	r16, 0xA5	; 165
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	e1 5a       	subi	r30, 0xA1	; 161
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a ef       	ldi	r20, 0xFA	; 250
    259e:	54 e4       	ldi	r21, 0x44	; 68
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	f8 01       	movw	r30, r16
    25aa:	80 83       	st	Z, r24
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	a2 83       	std	Z+2, r26	; 0x02
    25b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b2:	fe 01       	movw	r30, r28
    25b4:	e5 5a       	subi	r30, 0xA5	; 165
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	44 f4       	brge	.+16     	; 0x25e0 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    25d0:	fe 01       	movw	r30, r28
    25d2:	e7 5a       	subi	r30, 0xA7	; 167
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
    25de:	64 c0       	rjmp	.+200    	; 0x26a8 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    25e0:	fe 01       	movw	r30, r28
    25e2:	e5 5a       	subi	r30, 0xA5	; 165
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	0c f0       	brlt	.+2      	; 0x2600 <LCD_displayCharacter+0xd0>
    25fe:	43 c0       	rjmp	.+134    	; 0x2686 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	fe 01       	movw	r30, r28
    2602:	e1 5a       	subi	r30, 0xA1	; 161
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	8e 01       	movw	r16, r28
    2620:	07 5a       	subi	r16, 0xA7	; 167
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	f8 01       	movw	r30, r16
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	1f c0       	rjmp	.+62     	; 0x2676 <LCD_displayCharacter+0x146>
    2638:	fe 01       	movw	r30, r28
    263a:	e9 5a       	subi	r30, 0xA9	; 169
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	88 ec       	ldi	r24, 0xC8	; 200
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	fe 01       	movw	r30, r28
    2648:	e9 5a       	subi	r30, 0xA9	; 169
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <LCD_displayCharacter+0x120>
    2654:	fe 01       	movw	r30, r28
    2656:	e9 5a       	subi	r30, 0xA9	; 169
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	de 01       	movw	r26, r28
    2660:	a7 5a       	subi	r26, 0xA7	; 167
    2662:	bf 4f       	sbci	r27, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e7 5a       	subi	r30, 0xA7	; 167
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	9c 93       	st	X, r25
    2674:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5a       	subi	r30, 0xA7	; 167
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	d1 f6       	brne	.-76     	; 0x2638 <LCD_displayCharacter+0x108>
    2684:	27 c0       	rjmp	.+78     	; 0x26d4 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2686:	8e 01       	movw	r16, r28
    2688:	07 5a       	subi	r16, 0xA7	; 167
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	fe 01       	movw	r30, r28
    268e:	e5 5a       	subi	r30, 0xA5	; 165
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	f8 01       	movw	r30, r16
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	de 01       	movw	r26, r28
    26aa:	ab 5a       	subi	r26, 0xAB	; 171
    26ac:	bf 4f       	sbci	r27, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5a       	subi	r30, 0xA7	; 167
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	8d 93       	st	X+, r24
    26ba:	9c 93       	st	X, r25
    26bc:	fe 01       	movw	r30, r28
    26be:	eb 5a       	subi	r30, 0xAB	; 171
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <LCD_displayCharacter+0x196>
    26ca:	fe 01       	movw	r30, r28
    26cc:	eb 5a       	subi	r30, 0xAB	; 171
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    26d4:	a2 e3       	ldi	r26, 0x32	; 50
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e2 e3       	ldi	r30, 0x32	; 50
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 64       	ori	r24, 0x40	; 64
    26e0:	8c 93       	st	X, r24
    26e2:	fe 01       	movw	r30, r28
    26e4:	ef 5a       	subi	r30, 0xAF	; 175
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e8       	ldi	r26, 0x80	; 128
    26ee:	bf e3       	ldi	r27, 0x3F	; 63
    26f0:	80 83       	st	Z, r24
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	a2 83       	std	Z+2, r26	; 0x02
    26f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f8:	8e 01       	movw	r16, r28
    26fa:	03 5b       	subi	r16, 0xB3	; 179
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	ef 5a       	subi	r30, 0xAF	; 175
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	80 83       	st	Z, r24
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	a2 83       	std	Z+2, r26	; 0x02
    2724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2726:	fe 01       	movw	r30, r28
    2728:	e3 5b       	subi	r30, 0xB3	; 179
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	44 f4       	brge	.+16     	; 0x2754 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2744:	fe 01       	movw	r30, r28
    2746:	e5 5b       	subi	r30, 0xB5	; 181
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	64 c0       	rjmp	.+200    	; 0x281c <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2754:	fe 01       	movw	r30, r28
    2756:	e3 5b       	subi	r30, 0xB3	; 179
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	0c f0       	brlt	.+2      	; 0x2774 <LCD_displayCharacter+0x244>
    2772:	43 c0       	rjmp	.+134    	; 0x27fa <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2774:	fe 01       	movw	r30, r28
    2776:	ef 5a       	subi	r30, 0xAF	; 175
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	93 81       	ldd	r25, Z+3	; 0x03
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8e 01       	movw	r16, r28
    2794:	05 5b       	subi	r16, 0xB5	; 181
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	f8 01       	movw	r30, r16
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    27aa:	1f c0       	rjmp	.+62     	; 0x27ea <LCD_displayCharacter+0x2ba>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 5b       	subi	r30, 0xB7	; 183
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	88 ec       	ldi	r24, 0xC8	; 200
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 5b       	subi	r30, 0xB7	; 183
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <LCD_displayCharacter+0x294>
    27c8:	fe 01       	movw	r30, r28
    27ca:	e7 5b       	subi	r30, 0xB7	; 183
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	de 01       	movw	r26, r28
    27d4:	a5 5b       	subi	r26, 0xB5	; 181
    27d6:	bf 4f       	sbci	r27, 0xFF	; 255
    27d8:	fe 01       	movw	r30, r28
    27da:	e5 5b       	subi	r30, 0xB5	; 181
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	11 96       	adiw	r26, 0x01	; 1
    27e6:	9c 93       	st	X, r25
    27e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ea:	fe 01       	movw	r30, r28
    27ec:	e5 5b       	subi	r30, 0xB5	; 181
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	d1 f6       	brne	.-76     	; 0x27ac <LCD_displayCharacter+0x27c>
    27f8:	27 c0       	rjmp	.+78     	; 0x2848 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	8e 01       	movw	r16, r28
    27fc:	05 5b       	subi	r16, 0xB5	; 181
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	fe 01       	movw	r30, r28
    2802:	e3 5b       	subi	r30, 0xB3	; 179
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	f8 01       	movw	r30, r16
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	de 01       	movw	r26, r28
    281e:	a9 5b       	subi	r26, 0xB9	; 185
    2820:	bf 4f       	sbci	r27, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e5 5b       	subi	r30, 0xB5	; 181
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	8d 93       	st	X+, r24
    282e:	9c 93       	st	X, r25
    2830:	fe 01       	movw	r30, r28
    2832:	e9 5b       	subi	r30, 0xB9	; 185
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_displayCharacter+0x30a>
    283e:	fe 01       	movw	r30, r28
    2840:	e9 5b       	subi	r30, 0xB9	; 185
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    2848:	a5 e3       	ldi	r26, 0x35	; 53
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e5 e3       	ldi	r30, 0x35	; 53
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	98 2f       	mov	r25, r24
    2854:	9f 70       	andi	r25, 0x0F	; 15
    2856:	fe 01       	movw	r30, r28
    2858:	ed 59       	subi	r30, 0x9D	; 157
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	80 7f       	andi	r24, 0xF0	; 240
    2860:	89 2b       	or	r24, r25
    2862:	8c 93       	st	X, r24
    2864:	fe 01       	movw	r30, r28
    2866:	ed 5b       	subi	r30, 0xBD	; 189
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	8e 01       	movw	r16, r28
    287c:	01 5c       	subi	r16, 0xC1	; 193
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	fe 01       	movw	r30, r28
    2882:	ed 5b       	subi	r30, 0xBD	; 189
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	f8 01       	movw	r30, r16
    28a0:	80 83       	st	Z, r24
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	a2 83       	std	Z+2, r26	; 0x02
    28a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a8:	fe 01       	movw	r30, r28
    28aa:	ff 96       	adiw	r30, 0x3f	; 63
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <LCD_displayCharacter+0x39e>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9e af       	std	Y+62, r25	; 0x3e
    28ca:	8d af       	std	Y+61, r24	; 0x3d
    28cc:	46 c0       	rjmp	.+140    	; 0x295a <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    28ce:	fe 01       	movw	r30, r28
    28d0:	ff 96       	adiw	r30, 0x3f	; 63
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	64 f5       	brge	.+88     	; 0x2942 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	fe 01       	movw	r30, r28
    28ec:	ed 5b       	subi	r30, 0xBD	; 189
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9e af       	std	Y+62, r25	; 0x3e
    2916:	8d af       	std	Y+61, r24	; 0x3d
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <LCD_displayCharacter+0x408>
    291a:	88 ec       	ldi	r24, 0xC8	; 200
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c af       	std	Y+60, r25	; 0x3c
    2920:	8b af       	std	Y+59, r24	; 0x3b
    2922:	8b ad       	ldd	r24, Y+59	; 0x3b
    2924:	9c ad       	ldd	r25, Y+60	; 0x3c
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_displayCharacter+0x3f6>
    292a:	9c af       	std	Y+60, r25	; 0x3c
    292c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2930:	9e ad       	ldd	r25, Y+62	; 0x3e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9e af       	std	Y+62, r25	; 0x3e
    2936:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	8d ad       	ldd	r24, Y+61	; 0x3d
    293a:	9e ad       	ldd	r25, Y+62	; 0x3e
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f7       	brne	.-38     	; 0x291a <LCD_displayCharacter+0x3ea>
    2940:	16 c0       	rjmp	.+44     	; 0x296e <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2942:	fe 01       	movw	r30, r28
    2944:	ff 96       	adiw	r30, 0x3f	; 63
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9e af       	std	Y+62, r25	; 0x3e
    2958:	8d af       	std	Y+61, r24	; 0x3d
    295a:	8d ad       	ldd	r24, Y+61	; 0x3d
    295c:	9e ad       	ldd	r25, Y+62	; 0x3e
    295e:	9a af       	std	Y+58, r25	; 0x3a
    2960:	89 af       	std	Y+57, r24	; 0x39
    2962:	89 ad       	ldd	r24, Y+57	; 0x39
    2964:	9a ad       	ldd	r25, Y+58	; 0x3a
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCD_displayCharacter+0x436>
    296a:	9a af       	std	Y+58, r25	; 0x3a
    296c:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    296e:	a2 e3       	ldi	r26, 0x32	; 50
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e2 e3       	ldi	r30, 0x32	; 50
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8f 7b       	andi	r24, 0xBF	; 191
    297a:	8c 93       	st	X, r24
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a0 e8       	ldi	r26, 0x80	; 128
    2982:	bf e3       	ldi	r27, 0x3F	; 63
    2984:	8d ab       	std	Y+53, r24	; 0x35
    2986:	9e ab       	std	Y+54, r25	; 0x36
    2988:	af ab       	std	Y+55, r26	; 0x37
    298a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298c:	6d a9       	ldd	r22, Y+53	; 0x35
    298e:	7e a9       	ldd	r23, Y+54	; 0x36
    2990:	8f a9       	ldd	r24, Y+55	; 0x37
    2992:	98 ad       	ldd	r25, Y+56	; 0x38
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a ef       	ldi	r20, 0xFA	; 250
    299a:	54 e4       	ldi	r21, 0x44	; 68
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	89 ab       	std	Y+49, r24	; 0x31
    29a6:	9a ab       	std	Y+50, r25	; 0x32
    29a8:	ab ab       	std	Y+51, r26	; 0x33
    29aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29ac:	69 a9       	ldd	r22, Y+49	; 0x31
    29ae:	7a a9       	ldd	r23, Y+50	; 0x32
    29b0:	8b a9       	ldd	r24, Y+51	; 0x33
    29b2:	9c a9       	ldd	r25, Y+52	; 0x34
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	2c f4       	brge	.+10     	; 0x29ce <LCD_displayCharacter+0x49e>
		__ticks = 1;
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	98 ab       	std	Y+48, r25	; 0x30
    29ca:	8f a7       	std	Y+47, r24	; 0x2f
    29cc:	3f c0       	rjmp	.+126    	; 0x2a4c <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    29ce:	69 a9       	ldd	r22, Y+49	; 0x31
    29d0:	7a a9       	ldd	r23, Y+50	; 0x32
    29d2:	8b a9       	ldd	r24, Y+51	; 0x33
    29d4:	9c a9       	ldd	r25, Y+52	; 0x34
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	4f e7       	ldi	r20, 0x7F	; 127
    29dc:	57 e4       	ldi	r21, 0x47	; 71
    29de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e2:	18 16       	cp	r1, r24
    29e4:	4c f5       	brge	.+82     	; 0x2a38 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e6:	6d a9       	ldd	r22, Y+53	; 0x35
    29e8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ea:	8f a9       	ldd	r24, Y+55	; 0x37
    29ec:	98 ad       	ldd	r25, Y+56	; 0x38
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	98 ab       	std	Y+48, r25	; 0x30
    2a0c:	8f a7       	std	Y+47, r24	; 0x2f
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <LCD_displayCharacter+0x4fe>
    2a10:	88 ec       	ldi	r24, 0xC8	; 200
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9e a7       	std	Y+46, r25	; 0x2e
    2a16:	8d a7       	std	Y+45, r24	; 0x2d
    2a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_displayCharacter+0x4ec>
    2a20:	9e a7       	std	Y+46, r25	; 0x2e
    2a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a26:	98 a9       	ldd	r25, Y+48	; 0x30
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	98 ab       	std	Y+48, r25	; 0x30
    2a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a30:	98 a9       	ldd	r25, Y+48	; 0x30
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	69 f7       	brne	.-38     	; 0x2a10 <LCD_displayCharacter+0x4e0>
    2a36:	14 c0       	rjmp	.+40     	; 0x2a60 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a38:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	98 ab       	std	Y+48, r25	; 0x30
    2a4a:	8f a7       	std	Y+47, r24	; 0x2f
    2a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a50:	9c a7       	std	Y+44, r25	; 0x2c
    2a52:	8b a7       	std	Y+43, r24	; 0x2b
    2a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <LCD_displayCharacter+0x528>
    2a5c:	9c a7       	std	Y+44, r25	; 0x2c
    2a5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2a60:	a2 e3       	ldi	r26, 0x32	; 50
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e2 e3       	ldi	r30, 0x32	; 50
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 64       	ori	r24, 0x40	; 64
    2a6c:	8c 93       	st	X, r24
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e8       	ldi	r26, 0x80	; 128
    2a74:	bf e3       	ldi	r27, 0x3F	; 63
    2a76:	8f a3       	std	Y+39, r24	; 0x27
    2a78:	98 a7       	std	Y+40, r25	; 0x28
    2a7a:	a9 a7       	std	Y+41, r26	; 0x29
    2a7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a80:	78 a5       	ldd	r23, Y+40	; 0x28
    2a82:	89 a5       	ldd	r24, Y+41	; 0x29
    2a84:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	8b a3       	std	Y+35, r24	; 0x23
    2a98:	9c a3       	std	Y+36, r25	; 0x24
    2a9a:	ad a3       	std	Y+37, r26	; 0x25
    2a9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <LCD_displayCharacter+0x590>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9a a3       	std	Y+34, r25	; 0x22
    2abc:	89 a3       	std	Y+33, r24	; 0x21
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    2ada:	78 a5       	ldd	r23, Y+40	; 0x28
    2adc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9a a3       	std	Y+34, r25	; 0x22
    2afe:	89 a3       	std	Y+33, r24	; 0x21
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <LCD_displayCharacter+0x5f0>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	98 a3       	std	Y+32, r25	; 0x20
    2b08:	8f 8f       	std	Y+31, r24	; 0x1f
    2b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b0c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_displayCharacter+0x5de>
    2b12:	98 a3       	std	Y+32, r25	; 0x20
    2b14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	89 a1       	ldd	r24, Y+33	; 0x21
    2b18:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9a a3       	std	Y+34, r25	; 0x22
    2b1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	89 a1       	ldd	r24, Y+33	; 0x21
    2b22:	9a a1       	ldd	r25, Y+34	; 0x22
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <LCD_displayCharacter+0x5d2>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b30:	9e a1       	ldd	r25, Y+38	; 0x26
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9a a3       	std	Y+34, r25	; 0x22
    2b3c:	89 a3       	std	Y+33, r24	; 0x21
    2b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b40:	9a a1       	ldd	r25, Y+34	; 0x22
    2b42:	9e 8f       	std	Y+30, r25	; 0x1e
    2b44:	8d 8f       	std	Y+29, r24	; 0x1d
    2b46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_displayCharacter+0x61a>
    2b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b50:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2b52:	a5 e3       	ldi	r26, 0x35	; 53
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e5 e3       	ldi	r30, 0x35	; 53
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	2f 70       	andi	r18, 0x0F	; 15
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 59       	subi	r30, 0x9D	; 157
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	82 95       	swap	r24
    2b6e:	92 95       	swap	r25
    2b70:	90 7f       	andi	r25, 0xF0	; 240
    2b72:	98 27       	eor	r25, r24
    2b74:	80 7f       	andi	r24, 0xF0	; 240
    2b76:	98 27       	eor	r25, r24
    2b78:	82 2b       	or	r24, r18
    2b7a:	8c 93       	st	X, r24
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e8       	ldi	r26, 0x80	; 128
    2b82:	bf e3       	ldi	r27, 0x3F	; 63
    2b84:	89 8f       	std	Y+25, r24	; 0x19
    2b86:	9a 8f       	std	Y+26, r25	; 0x1a
    2b88:	ab 8f       	std	Y+27, r26	; 0x1b
    2b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	4a ef       	ldi	r20, 0xFA	; 250
    2b9a:	54 e4       	ldi	r21, 0x44	; 68
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8d 8b       	std	Y+21, r24	; 0x15
    2ba6:	9e 8b       	std	Y+22, r25	; 0x16
    2ba8:	af 8b       	std	Y+23, r26	; 0x17
    2baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bac:	6d 89       	ldd	r22, Y+21	; 0x15
    2bae:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	8b 8b       	std	Y+19, r24	; 0x13
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2bce:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	69 8d       	ldd	r22, Y+25	; 0x19
    2be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <LCD_displayCharacter+0x6fe>
    2c10:	88 ec       	ldi	r24, 0xC8	; 200
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9a 8b       	std	Y+18, r25	; 0x12
    2c16:	89 8b       	std	Y+17, r24	; 0x11
    2c18:	89 89       	ldd	r24, Y+17	; 0x11
    2c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <LCD_displayCharacter+0x6ec>
    2c20:	9a 8b       	std	Y+18, r25	; 0x12
    2c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9c 8b       	std	Y+20, r25	; 0x14
    2c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c30:	9c 89       	ldd	r25, Y+20	; 0x14
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <LCD_displayCharacter+0x6e0>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
    2c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c50:	98 8b       	std	Y+16, r25	; 0x10
    2c52:	8f 87       	std	Y+15, r24	; 0x0f
    2c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c56:	98 89       	ldd	r25, Y+16	; 0x10
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <LCD_displayCharacter+0x728>
    2c5c:	98 8b       	std	Y+16, r25	; 0x10
    2c5e:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2c60:	a2 e3       	ldi	r26, 0x32	; 50
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e2 e3       	ldi	r30, 0x32	; 50
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	8f 7b       	andi	r24, 0xBF	; 191
    2c6c:	8c 93       	st	X, r24
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a0 e8       	ldi	r26, 0x80	; 128
    2c74:	bf e3       	ldi	r27, 0x3F	; 63
    2c76:	8b 87       	std	Y+11, r24	; 0x0b
    2c78:	9c 87       	std	Y+12, r25	; 0x0c
    2c7a:	ad 87       	std	Y+13, r26	; 0x0d
    2c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a ef       	ldi	r20, 0xFA	; 250
    2c8c:	54 e4       	ldi	r21, 0x44	; 68
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8f 83       	std	Y+7, r24	; 0x07
    2c98:	98 87       	std	Y+8, r25	; 0x08
    2c9a:	a9 87       	std	Y+9, r26	; 0x09
    2c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e8       	ldi	r20, 0x80	; 128
    2cac:	5f e3       	ldi	r21, 0x3F	; 63
    2cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb2:	88 23       	and	r24, r24
    2cb4:	2c f4       	brge	.+10     	; 0x2cc0 <LCD_displayCharacter+0x790>
		__ticks = 1;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	3f c0       	rjmp	.+126    	; 0x2d3e <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	3f ef       	ldi	r19, 0xFF	; 255
    2ccc:	4f e7       	ldi	r20, 0x7F	; 127
    2cce:	57 e4       	ldi	r21, 0x47	; 71
    2cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd4:	18 16       	cp	r1, r24
    2cd6:	4c f5       	brge	.+82     	; 0x2d2a <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e2       	ldi	r20, 0x20	; 32
    2ce6:	51 e4       	ldi	r21, 0x41	; 65
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <LCD_displayCharacter+0x7f0>
    2d02:	88 ec       	ldi	r24, 0xC8	; 200
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_displayCharacter+0x7de>
    2d12:	9c 83       	std	Y+4, r25	; 0x04
    2d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	9e 83       	std	Y+6, r25	; 0x06
    2d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	69 f7       	brne	.-38     	; 0x2d02 <LCD_displayCharacter+0x7d2>
    2d28:	14 c0       	rjmp	.+40     	; 0x2d52 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2c:	78 85       	ldd	r23, Y+8	; 0x08
    2d2e:	89 85       	ldd	r24, Y+9	; 0x09
    2d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d40:	9e 81       	ldd	r25, Y+6	; 0x06
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_displayCharacter+0x81a>
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d52:	cd 59       	subi	r28, 0x9D	; 157
    2d54:	df 4f       	sbci	r29, 0xFF	; 255
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	08 95       	ret

00002d6a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <LCD_displayString+0x6>
    2d70:	0f 92       	push	r0
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	9b 83       	std	Y+3, r25	; 0x03
    2d78:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d7a:	19 82       	std	Y+1, r1	; 0x01
    2d7c:	0e c0       	rjmp	.+28     	; 0x2d9a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	fc 01       	movw	r30, r24
    2d8a:	e2 0f       	add	r30, r18
    2d8c:	f3 1f       	adc	r31, r19
    2d8e:	80 81       	ld	r24, Z
    2d90:	0e 94 98 12 	call	0x2530	; 0x2530 <LCD_displayCharacter>
		i++;
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	fc 01       	movw	r30, r24
    2da6:	e2 0f       	add	r30, r18
    2da8:	f3 1f       	adc	r31, r19
    2daa:	80 81       	ld	r24, Z
    2dac:	88 23       	and	r24, r24
    2dae:	39 f7       	brne	.-50     	; 0x2d7e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <LCD_goToRowColumn+0x6>
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <LCD_goToRowColumn+0x8>
    2dc4:	0f 92       	push	r0
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	8a 83       	std	Y+2, r24	; 0x02
    2dcc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	3d 83       	std	Y+5, r19	; 0x05
    2dd6:	2c 83       	std	Y+4, r18	; 0x04
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	9d 81       	ldd	r25, Y+5	; 0x05
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	91 05       	cpc	r25, r1
    2de0:	c1 f0       	breq	.+48     	; 0x2e12 <LCD_goToRowColumn+0x56>
    2de2:	2c 81       	ldd	r18, Y+4	; 0x04
    2de4:	3d 81       	ldd	r19, Y+5	; 0x05
    2de6:	22 30       	cpi	r18, 0x02	; 2
    2de8:	31 05       	cpc	r19, r1
    2dea:	2c f4       	brge	.+10     	; 0x2df6 <LCD_goToRowColumn+0x3a>
    2dec:	8c 81       	ldd	r24, Y+4	; 0x04
    2dee:	9d 81       	ldd	r25, Y+5	; 0x05
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	61 f0       	breq	.+24     	; 0x2e0c <LCD_goToRowColumn+0x50>
    2df4:	19 c0       	rjmp	.+50     	; 0x2e28 <LCD_goToRowColumn+0x6c>
    2df6:	2c 81       	ldd	r18, Y+4	; 0x04
    2df8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dfa:	22 30       	cpi	r18, 0x02	; 2
    2dfc:	31 05       	cpc	r19, r1
    2dfe:	69 f0       	breq	.+26     	; 0x2e1a <LCD_goToRowColumn+0x5e>
    2e00:	8c 81       	ldd	r24, Y+4	; 0x04
    2e02:	9d 81       	ldd	r25, Y+5	; 0x05
    2e04:	83 30       	cpi	r24, 0x03	; 3
    2e06:	91 05       	cpc	r25, r1
    2e08:	61 f0       	breq	.+24     	; 0x2e22 <LCD_goToRowColumn+0x66>
    2e0a:	0e c0       	rjmp	.+28     	; 0x2e28 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	0b c0       	rjmp	.+22     	; 0x2e28 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	80 5c       	subi	r24, 0xC0	; 192
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	07 c0       	rjmp	.+14     	; 0x2e28 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	80 5f       	subi	r24, 0xF0	; 240
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	03 c0       	rjmp	.+6      	; 0x2e28 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	80 5b       	subi	r24, 0xB0	; 176
    2e26:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	80 68       	ori	r24, 0x80	; 128
    2e2c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	00 d0       	rcall	.+0      	; 0x2e46 <LCD_displayStringRowColumn+0x6>
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <LCD_displayStringRowColumn+0x8>
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	6a 83       	std	Y+2, r22	; 0x02
    2e50:	5c 83       	std	Y+4, r21	; 0x04
    2e52:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	6a 81       	ldd	r22, Y+2	; 0x02
    2e58:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e60:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <LCD_displayString>
}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	62 97       	sbiw	r28, 0x12	; 18
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	9a 8b       	std	Y+18, r25	; 0x12
    2e88:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2e8a:	89 89       	ldd	r24, Y+17	; 0x11
    2e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e8e:	9e 01       	movw	r18, r28
    2e90:	2f 5f       	subi	r18, 0xFF	; 255
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	b9 01       	movw	r22, r18
    2e96:	4a e0       	ldi	r20, 0x0A	; 10
    2e98:	50 e0       	ldi	r21, 0x00	; 0
    2e9a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <itoa>
   LCD_displayString(buff);
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <LCD_displayString>
}
    2ea6:	62 96       	adiw	r28, 0x12	; 18
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	cf 91       	pop	r28
    2eb4:	df 91       	pop	r29
    2eb6:	08 95       	ret

00002eb8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2eb8:	df 93       	push	r29
    2eba:	cf 93       	push	r28
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <LCD_sendCommand>
}
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <__vector_9>:




ISR(TIMER1_OVF_vect)
{
    2ecc:	1f 92       	push	r1
    2ece:	0f 92       	push	r0
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	0f 92       	push	r0
    2ed4:	11 24       	eor	r1, r1
    2ed6:	2f 93       	push	r18
    2ed8:	3f 93       	push	r19
    2eda:	4f 93       	push	r20
    2edc:	5f 93       	push	r21
    2ede:	6f 93       	push	r22
    2ee0:	7f 93       	push	r23
    2ee2:	8f 93       	push	r24
    2ee4:	9f 93       	push	r25
    2ee6:	af 93       	push	r26
    2ee8:	bf 93       	push	r27
    2eea:	ef 93       	push	r30
    2eec:	ff 93       	push	r31
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    2ef6:	80 91 f8 00 	lds	r24, 0x00F8
    2efa:	90 91 f9 00 	lds	r25, 0x00F9
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	29 f0       	breq	.+10     	; 0x2f0c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackTimerPtr)();
    2f02:	e0 91 f8 00 	lds	r30, 0x00F8
    2f06:	f0 91 f9 00 	lds	r31, 0x00F9
    2f0a:	09 95       	icall
	}
}
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	ff 91       	pop	r31
    2f12:	ef 91       	pop	r30
    2f14:	bf 91       	pop	r27
    2f16:	af 91       	pop	r26
    2f18:	9f 91       	pop	r25
    2f1a:	8f 91       	pop	r24
    2f1c:	7f 91       	pop	r23
    2f1e:	6f 91       	pop	r22
    2f20:	5f 91       	pop	r21
    2f22:	4f 91       	pop	r20
    2f24:	3f 91       	pop	r19
    2f26:	2f 91       	pop	r18
    2f28:	0f 90       	pop	r0
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	0f 90       	pop	r0
    2f2e:	1f 90       	pop	r1
    2f30:	18 95       	reti

00002f32 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2f32:	1f 92       	push	r1
    2f34:	0f 92       	push	r0
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	0f 92       	push	r0
    2f3a:	11 24       	eor	r1, r1
    2f3c:	2f 93       	push	r18
    2f3e:	3f 93       	push	r19
    2f40:	4f 93       	push	r20
    2f42:	5f 93       	push	r21
    2f44:	6f 93       	push	r22
    2f46:	7f 93       	push	r23
    2f48:	8f 93       	push	r24
    2f4a:	9f 93       	push	r25
    2f4c:	af 93       	push	r26
    2f4e:	bf 93       	push	r27
    2f50:	ef 93       	push	r30
    2f52:	ff 93       	push	r31
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    2f5c:	80 91 f8 00 	lds	r24, 0x00F8
    2f60:	90 91 f9 00 	lds	r25, 0x00F9
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	29 f0       	breq	.+10     	; 0x2f72 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackTimerPtr)();
    2f68:	e0 91 f8 00 	lds	r30, 0x00F8
    2f6c:	f0 91 f9 00 	lds	r31, 0x00F9
    2f70:	09 95       	icall
	}
}
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	ff 91       	pop	r31
    2f78:	ef 91       	pop	r30
    2f7a:	bf 91       	pop	r27
    2f7c:	af 91       	pop	r26
    2f7e:	9f 91       	pop	r25
    2f80:	8f 91       	pop	r24
    2f82:	7f 91       	pop	r23
    2f84:	6f 91       	pop	r22
    2f86:	5f 91       	pop	r21
    2f88:	4f 91       	pop	r20
    2f8a:	3f 91       	pop	r19
    2f8c:	2f 91       	pop	r18
    2f8e:	0f 90       	pop	r0
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	0f 90       	pop	r0
    2f94:	1f 90       	pop	r1
    2f96:	18 95       	reti

00002f98 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <Timer1_init+0x6>
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <Timer1_init+0x8>
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01

	TCNT1=Config_Ptr->initial_value;
    2fa8:	ac e4       	ldi	r26, 0x4C	; 76
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e9 81       	ldd	r30, Y+1	; 0x01
    2fae:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	11 96       	adiw	r26, 0x01	; 1
    2fb6:	9c 93       	st	X, r25
    2fb8:	8e 93       	st	-X, r24
		switch (Config_Ptr -> Timer1_OpMode){
    2fba:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbe:	80 81       	ld	r24, Z
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	3c 83       	std	Y+4, r19	; 0x04
    2fc6:	2b 83       	std	Y+3, r18	; 0x03
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	31 f0       	breq	.+12     	; 0x2fdc <Timer1_init+0x44>
    2fd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2fd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2fd4:	22 30       	cpi	r18, 0x02	; 2
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	21 f1       	breq	.+72     	; 0x3022 <Timer1_init+0x8a>
    2fda:	58 c0       	rjmp	.+176    	; 0x308c <Timer1_init+0xf4>
			case Overflow:
				SREG  |= (1<<7);           // Enable global interrupts in MC.
    2fdc:	af e5       	ldi	r26, 0x5F	; 95
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	ef e5       	ldi	r30, 0x5F	; 95
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	80 68       	ori	r24, 0x80	; 128
    2fe8:	8c 93       	st	X, r24
				/*Overflow Interrupt Enable*/
				TIMSK |=(1<<TOIE1);
    2fea:	a9 e5       	ldi	r26, 0x59	; 89
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	e9 e5       	ldi	r30, 0x59	; 89
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	84 60       	ori	r24, 0x04	; 4
    2ff6:	8c 93       	st	X, r24
				/*Enable Force Output Compare*/
				TCCR1A=(1<<FOC1A);
    2ff8:	ef e4       	ldi	r30, 0x4F	; 79
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	88 e0       	ldi	r24, 0x08	; 8
    2ffe:	80 83       	st	Z, r24
				TCCR1A=(1<<FOC1B);
    3000:	ef e4       	ldi	r30, 0x4F	; 79
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	84 e0       	ldi	r24, 0x04	; 4
    3006:	80 83       	st	Z, r24
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Timer1prescaler);
    3008:	ae e4       	ldi	r26, 0x4E	; 78
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	ee e4       	ldi	r30, 0x4E	; 78
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	98 2f       	mov	r25, r24
    3014:	98 7f       	andi	r25, 0xF8	; 248
    3016:	e9 81       	ldd	r30, Y+1	; 0x01
    3018:	fa 81       	ldd	r31, Y+2	; 0x02
    301a:	81 81       	ldd	r24, Z+1	; 0x01
    301c:	89 2b       	or	r24, r25
    301e:	8c 93       	st	X, r24
    3020:	35 c0       	rjmp	.+106    	; 0x308c <Timer1_init+0xf4>

				break;

			case COMPARE:
				SREG  |= (1<<7);           // Enable global interrupts in MC.
    3022:	af e5       	ldi	r26, 0x5F	; 95
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	ef e5       	ldi	r30, 0x5F	; 95
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	80 68       	ori	r24, 0x80	; 128
    302e:	8c 93       	st	X, r24
				/*Compare Interrupt Enable*/
				TIMSK|=(1<<OCIE1A);
    3030:	a9 e5       	ldi	r26, 0x59	; 89
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	e9 e5       	ldi	r30, 0x59	; 89
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	80 61       	ori	r24, 0x10	; 16
    303c:	8c 93       	st	X, r24
				/*Enable Force Output Compare*/
				TCCR1A|=(1<<FOC1A);
    303e:	af e4       	ldi	r26, 0x4F	; 79
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	ef e4       	ldi	r30, 0x4F	; 79
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	88 60       	ori	r24, 0x08	; 8
    304a:	8c 93       	st	X, r24
				TCCR1A&=~(1<<FOC1B);
    304c:	af e4       	ldi	r26, 0x4F	; 79
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	ef e4       	ldi	r30, 0x4F	; 79
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	8b 7f       	andi	r24, 0xFB	; 251
    3058:	8c 93       	st	X, r24
				/*Set Compare Value*/
				OCR1A = Config_Ptr ->compare_value;
    305a:	aa e4       	ldi	r26, 0x4A	; 74
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e9 81       	ldd	r30, Y+1	; 0x01
    3060:	fa 81       	ldd	r31, Y+2	; 0x02
    3062:	84 81       	ldd	r24, Z+4	; 0x04
    3064:	95 81       	ldd	r25, Z+5	; 0x05
    3066:	11 96       	adiw	r26, 0x01	; 1
    3068:	9c 93       	st	X, r25
    306a:	8e 93       	st	-X, r24
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Timer1prescaler);
    306c:	ae e4       	ldi	r26, 0x4E	; 78
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	ee e4       	ldi	r30, 0x4E	; 78
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	98 2f       	mov	r25, r24
    3078:	98 7f       	andi	r25, 0xF8	; 248
    307a:	e9 81       	ldd	r30, Y+1	; 0x01
    307c:	fa 81       	ldd	r31, Y+2	; 0x02
    307e:	81 81       	ldd	r24, Z+1	; 0x01
    3080:	89 2b       	or	r24, r25
    3082:	8c 93       	st	X, r24
				TCCR1B = (1<<WGM12);
    3084:	ee e4       	ldi	r30, 0x4E	; 78
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	88 e0       	ldi	r24, 0x08	; 8
    308a:	80 83       	st	Z, r24
				break;

			}
	}
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <Timer1_DeInit>:

/*
 * Description: Function to disable the Timer1
 */
void Timer1_DeInit(void)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    30a2:	ef e4       	ldi	r30, 0x4F	; 79
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	10 82       	st	Z, r1
	TCCR1B = 0;
    30a8:	ee e4       	ldi	r30, 0x4E	; 78
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	10 82       	st	Z, r1
	TCNT1 = 0;
    30ae:	ec e4       	ldi	r30, 0x4C	; 76
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	11 82       	std	Z+1, r1	; 0x01
    30b4:	10 82       	st	Z, r1
	OCR1A = 0 ;
    30b6:	ea e4       	ldi	r30, 0x4A	; 74
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	11 82       	std	Z+1, r1	; 0x01
    30bc:	10 82       	st	Z, r1
	OCR1B = 0 ;
    30be:	e8 e4       	ldi	r30, 0x48	; 72
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	11 82       	std	Z+1, r1	; 0x01
    30c4:	10 82       	st	Z, r1


}
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <Timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack( void(*aTimer_ptr)(void))
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <Timer1_setCallBack+0x6>
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackTimerPtr = aTimer_ptr;
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	90 93 f9 00 	sts	0x00F9, r25
    30e2:	80 93 f8 00 	sts	0x00F8, r24
}
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <UART_init+0x6>
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <UART_init+0x8>
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	9c 83       	std	Y+4, r25	; 0x04
    30fe:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3100:	1a 82       	std	Y+2, r1	; 0x02
    3102:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3104:	eb e2       	ldi	r30, 0x2B	; 43
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    310c:	ea e2       	ldi	r30, 0x2A	; 42
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	88 e1       	ldi	r24, 0x18	; 24
    3112:	80 83       	st	Z, r24
	 * UPM1:0  = according to configured parity bits number
	 * USBS    = according to configured stop bits number
	 * UCSZ1:0 = according to to configured BitData
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3114:	e0 e4       	ldi	r30, 0x40	; 64
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 e8       	ldi	r24, 0x80	; 128
    311a:	80 83       	st	Z, r24
	UCSRC |= Config_Ptr -> stop_bit;
    311c:	a0 e4       	ldi	r26, 0x40	; 64
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e0 e4       	ldi	r30, 0x40	; 64
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	90 81       	ld	r25, Z
    3126:	eb 81       	ldd	r30, Y+3	; 0x03
    3128:	fc 81       	ldd	r31, Y+4	; 0x04
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	89 2b       	or	r24, r25
    312e:	8c 93       	st	X, r24
	UCSRC |= Config_Ptr -> parity;
    3130:	a0 e4       	ldi	r26, 0x40	; 64
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e0 e4       	ldi	r30, 0x40	; 64
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	90 81       	ld	r25, Z
    313a:	eb 81       	ldd	r30, Y+3	; 0x03
    313c:	fc 81       	ldd	r31, Y+4	; 0x04
    313e:	81 81       	ldd	r24, Z+1	; 0x01
    3140:	89 2b       	or	r24, r25
    3142:	8c 93       	st	X, r24
	switch(Config_Ptr->bit_data){
    3144:	eb 81       	ldd	r30, Y+3	; 0x03
    3146:	fc 81       	ldd	r31, Y+4	; 0x04
    3148:	80 81       	ld	r24, Z
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	87 30       	cpi	r24, 0x07	; 7
    3150:	91 05       	cpc	r25, r1
    3152:	79 f4       	brne	.+30     	; 0x3172 <UART_init+0x82>

	case NINE_BIT:

		UCSRB |= (1<<UCSZ2) | (1<<RXB8) | (1<<TXB8);
    3154:	aa e2       	ldi	r26, 0x2A	; 42
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	ea e2       	ldi	r30, 0x2A	; 42
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	87 60       	ori	r24, 0x07	; 7
    3160:	8c 93       	st	X, r24
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    3162:	a0 e4       	ldi	r26, 0x40	; 64
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e0 e4       	ldi	r30, 0x40	; 64
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	86 60       	ori	r24, 0x06	; 6
    316e:	8c 93       	st	X, r24
    3170:	0a c0       	rjmp	.+20     	; 0x3186 <UART_init+0x96>
		break;

	default:
		UCSRC |= Config_Ptr->bit_data;
    3172:	a0 e4       	ldi	r26, 0x40	; 64
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e0 e4       	ldi	r30, 0x40	; 64
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	90 81       	ld	r25, Z
    317c:	eb 81       	ldd	r30, Y+3	; 0x03
    317e:	fc 81       	ldd	r31, Y+4	; 0x04
    3180:	80 81       	ld	r24, Z
    3182:	89 2b       	or	r24, r25
    3184:	8c 93       	st	X, r24

	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->BaudRate * 8UL))) - 1);
    3186:	eb 81       	ldd	r30, Y+3	; 0x03
    3188:	fc 81       	ldd	r31, Y+4	; 0x04
    318a:	83 81       	ldd	r24, Z+3	; 0x03
    318c:	94 81       	ldd	r25, Z+4	; 0x04
    318e:	a5 81       	ldd	r26, Z+5	; 0x05
    3190:	b6 81       	ldd	r27, Z+6	; 0x06
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	aa 1f       	adc	r26, r26
    3198:	bb 1f       	adc	r27, r27
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	aa 1f       	adc	r26, r26
    31a0:	bb 1f       	adc	r27, r27
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	aa 1f       	adc	r26, r26
    31a8:	bb 1f       	adc	r27, r27
    31aa:	9c 01       	movw	r18, r24
    31ac:	ad 01       	movw	r20, r26
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	92 e1       	ldi	r25, 0x12	; 18
    31b2:	aa e7       	ldi	r26, 0x7A	; 122
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	0e 94 8c 19 	call	0x3318	; 0x3318 <__udivmodsi4>
    31be:	da 01       	movw	r26, r20
    31c0:	c9 01       	movw	r24, r18
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	9a 83       	std	Y+2, r25	; 0x02
    31c6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    31c8:	e0 e4       	ldi	r30, 0x40	; 64
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	89 2f       	mov	r24, r25
    31d2:	99 27       	eor	r25, r25
    31d4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    31d6:	e9 e2       	ldi	r30, 0x29	; 41
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	80 83       	st	Z, r24
}
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	0f 92       	push	r0
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31f8:	eb e2       	ldi	r30, 0x2B	; 43
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	80 72       	andi	r24, 0x20	; 32
    3204:	90 70       	andi	r25, 0x00	; 0
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	b9 f3       	breq	.-18     	; 0x31f8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    320a:	ec e2       	ldi	r30, 0x2C	; 44
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	80 83       	st	Z, r24
	/****************** BIT_IS_CLEAR BIT_IS_CLEAR******* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3212:	0f 90       	pop	r0
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3222:	eb e2       	ldi	r30, 0x2B	; 43
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	88 2f       	mov	r24, r24
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	80 72       	andi	r24, 0x20	; 32
    322e:	90 70       	andi	r25, 0x00	; 0
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	b9 f3       	breq	.-18     	; 0x3222 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3234:	ec e2       	ldi	r30, 0x2C	; 44
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
}
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	08 95       	ret

00003240 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3240:	df 93       	push	r29
    3242:	cf 93       	push	r28
    3244:	00 d0       	rcall	.+0      	; 0x3246 <UART_sendString+0x6>
    3246:	0f 92       	push	r0
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	9b 83       	std	Y+3, r25	; 0x03
    324e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3250:	19 82       	std	Y+1, r1	; 0x01
    3252:	0e c0       	rjmp	.+28     	; 0x3270 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	fc 01       	movw	r30, r24
    3260:	e2 0f       	add	r30, r18
    3262:	f3 1f       	adc	r31, r19
    3264:	80 81       	ld	r24, Z
    3266:	0e 94 f6 18 	call	0x31ec	; 0x31ec <UART_sendByte>
		i++;
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	8f 5f       	subi	r24, 0xFF	; 255
    326e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	fc 01       	movw	r30, r24
    327c:	e2 0f       	add	r30, r18
    327e:	f3 1f       	adc	r31, r19
    3280:	80 81       	ld	r24, Z
    3282:	88 23       	and	r24, r24
    3284:	39 f7       	brne	.-50     	; 0x3254 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	00 d0       	rcall	.+0      	; 0x329c <UART_receiveString+0xa>
    329c:	0f 92       	push	r0
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	9b 83       	std	Y+3, r25	; 0x03
    32a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32a6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	28 2f       	mov	r18, r24
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	9b 81       	ldd	r25, Y+3	; 0x03
    32b2:	8c 01       	movw	r16, r24
    32b4:	02 0f       	add	r16, r18
    32b6:	13 1f       	adc	r17, r19
    32b8:	0e 94 0d 19 	call	0x321a	; 0x321a <UART_recieveByte>
    32bc:	f8 01       	movw	r30, r16
    32be:	80 83       	st	Z, r24
    32c0:	0f c0       	rjmp	.+30     	; 0x32e0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	8f 5f       	subi	r24, 0xFF	; 255
    32c6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	9b 81       	ldd	r25, Y+3	; 0x03
    32d2:	8c 01       	movw	r16, r24
    32d4:	02 0f       	add	r16, r18
    32d6:	13 1f       	adc	r17, r19
    32d8:	0e 94 0d 19 	call	0x321a	; 0x321a <UART_recieveByte>
    32dc:	f8 01       	movw	r30, r16
    32de:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ea:	fc 01       	movw	r30, r24
    32ec:	e2 0f       	add	r30, r18
    32ee:	f3 1f       	adc	r31, r19
    32f0:	80 81       	ld	r24, Z
    32f2:	83 32       	cpi	r24, 0x23	; 35
    32f4:	31 f7       	brne	.-52     	; 0x32c2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	28 2f       	mov	r18, r24
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3300:	fc 01       	movw	r30, r24
    3302:	e2 0f       	add	r30, r18
    3304:	f3 1f       	adc	r31, r19
    3306:	10 82       	st	Z, r1
}
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	08 95       	ret

00003318 <__udivmodsi4>:
    3318:	a1 e2       	ldi	r26, 0x21	; 33
    331a:	1a 2e       	mov	r1, r26
    331c:	aa 1b       	sub	r26, r26
    331e:	bb 1b       	sub	r27, r27
    3320:	fd 01       	movw	r30, r26
    3322:	0d c0       	rjmp	.+26     	; 0x333e <__udivmodsi4_ep>

00003324 <__udivmodsi4_loop>:
    3324:	aa 1f       	adc	r26, r26
    3326:	bb 1f       	adc	r27, r27
    3328:	ee 1f       	adc	r30, r30
    332a:	ff 1f       	adc	r31, r31
    332c:	a2 17       	cp	r26, r18
    332e:	b3 07       	cpc	r27, r19
    3330:	e4 07       	cpc	r30, r20
    3332:	f5 07       	cpc	r31, r21
    3334:	20 f0       	brcs	.+8      	; 0x333e <__udivmodsi4_ep>
    3336:	a2 1b       	sub	r26, r18
    3338:	b3 0b       	sbc	r27, r19
    333a:	e4 0b       	sbc	r30, r20
    333c:	f5 0b       	sbc	r31, r21

0000333e <__udivmodsi4_ep>:
    333e:	66 1f       	adc	r22, r22
    3340:	77 1f       	adc	r23, r23
    3342:	88 1f       	adc	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	1a 94       	dec	r1
    3348:	69 f7       	brne	.-38     	; 0x3324 <__udivmodsi4_loop>
    334a:	60 95       	com	r22
    334c:	70 95       	com	r23
    334e:	80 95       	com	r24
    3350:	90 95       	com	r25
    3352:	9b 01       	movw	r18, r22
    3354:	ac 01       	movw	r20, r24
    3356:	bd 01       	movw	r22, r26
    3358:	cf 01       	movw	r24, r30
    335a:	08 95       	ret

0000335c <__prologue_saves__>:
    335c:	2f 92       	push	r2
    335e:	3f 92       	push	r3
    3360:	4f 92       	push	r4
    3362:	5f 92       	push	r5
    3364:	6f 92       	push	r6
    3366:	7f 92       	push	r7
    3368:	8f 92       	push	r8
    336a:	9f 92       	push	r9
    336c:	af 92       	push	r10
    336e:	bf 92       	push	r11
    3370:	cf 92       	push	r12
    3372:	df 92       	push	r13
    3374:	ef 92       	push	r14
    3376:	ff 92       	push	r15
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	ca 1b       	sub	r28, r26
    3386:	db 0b       	sbc	r29, r27
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	09 94       	ijmp

00003394 <__epilogue_restores__>:
    3394:	2a 88       	ldd	r2, Y+18	; 0x12
    3396:	39 88       	ldd	r3, Y+17	; 0x11
    3398:	48 88       	ldd	r4, Y+16	; 0x10
    339a:	5f 84       	ldd	r5, Y+15	; 0x0f
    339c:	6e 84       	ldd	r6, Y+14	; 0x0e
    339e:	7d 84       	ldd	r7, Y+13	; 0x0d
    33a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    33a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    33a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    33a6:	b9 84       	ldd	r11, Y+9	; 0x09
    33a8:	c8 84       	ldd	r12, Y+8	; 0x08
    33aa:	df 80       	ldd	r13, Y+7	; 0x07
    33ac:	ee 80       	ldd	r14, Y+6	; 0x06
    33ae:	fd 80       	ldd	r15, Y+5	; 0x05
    33b0:	0c 81       	ldd	r16, Y+4	; 0x04
    33b2:	1b 81       	ldd	r17, Y+3	; 0x03
    33b4:	aa 81       	ldd	r26, Y+2	; 0x02
    33b6:	b9 81       	ldd	r27, Y+1	; 0x01
    33b8:	ce 0f       	add	r28, r30
    33ba:	d1 1d       	adc	r29, r1
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	ed 01       	movw	r28, r26
    33c8:	08 95       	ret

000033ca <itoa>:
    33ca:	fb 01       	movw	r30, r22
    33cc:	9f 01       	movw	r18, r30
    33ce:	e8 94       	clt
    33d0:	42 30       	cpi	r20, 0x02	; 2
    33d2:	c4 f0       	brlt	.+48     	; 0x3404 <itoa+0x3a>
    33d4:	45 32       	cpi	r20, 0x25	; 37
    33d6:	b4 f4       	brge	.+44     	; 0x3404 <itoa+0x3a>
    33d8:	4a 30       	cpi	r20, 0x0A	; 10
    33da:	29 f4       	brne	.+10     	; 0x33e6 <itoa+0x1c>
    33dc:	97 fb       	bst	r25, 7
    33de:	1e f4       	brtc	.+6      	; 0x33e6 <itoa+0x1c>
    33e0:	90 95       	com	r25
    33e2:	81 95       	neg	r24
    33e4:	9f 4f       	sbci	r25, 0xFF	; 255
    33e6:	64 2f       	mov	r22, r20
    33e8:	77 27       	eor	r23, r23
    33ea:	0e 94 16 1a 	call	0x342c	; 0x342c <__udivmodhi4>
    33ee:	80 5d       	subi	r24, 0xD0	; 208
    33f0:	8a 33       	cpi	r24, 0x3A	; 58
    33f2:	0c f0       	brlt	.+2      	; 0x33f6 <itoa+0x2c>
    33f4:	89 5d       	subi	r24, 0xD9	; 217
    33f6:	81 93       	st	Z+, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	a1 f7       	brne	.-24     	; 0x33e6 <itoa+0x1c>
    33fe:	16 f4       	brtc	.+4      	; 0x3404 <itoa+0x3a>
    3400:	5d e2       	ldi	r21, 0x2D	; 45
    3402:	51 93       	st	Z+, r21
    3404:	10 82       	st	Z, r1
    3406:	c9 01       	movw	r24, r18
    3408:	0c 94 06 1a 	jmp	0x340c	; 0x340c <strrev>

0000340c <strrev>:
    340c:	dc 01       	movw	r26, r24
    340e:	fc 01       	movw	r30, r24
    3410:	67 2f       	mov	r22, r23
    3412:	71 91       	ld	r23, Z+
    3414:	77 23       	and	r23, r23
    3416:	e1 f7       	brne	.-8      	; 0x3410 <strrev+0x4>
    3418:	32 97       	sbiw	r30, 0x02	; 2
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <strrev+0x18>
    341c:	7c 91       	ld	r23, X
    341e:	6d 93       	st	X+, r22
    3420:	70 83       	st	Z, r23
    3422:	62 91       	ld	r22, -Z
    3424:	ae 17       	cp	r26, r30
    3426:	bf 07       	cpc	r27, r31
    3428:	c8 f3       	brcs	.-14     	; 0x341c <strrev+0x10>
    342a:	08 95       	ret

0000342c <__udivmodhi4>:
    342c:	aa 1b       	sub	r26, r26
    342e:	bb 1b       	sub	r27, r27
    3430:	51 e1       	ldi	r21, 0x11	; 17
    3432:	07 c0       	rjmp	.+14     	; 0x3442 <__udivmodhi4_ep>

00003434 <__udivmodhi4_loop>:
    3434:	aa 1f       	adc	r26, r26
    3436:	bb 1f       	adc	r27, r27
    3438:	a6 17       	cp	r26, r22
    343a:	b7 07       	cpc	r27, r23
    343c:	10 f0       	brcs	.+4      	; 0x3442 <__udivmodhi4_ep>
    343e:	a6 1b       	sub	r26, r22
    3440:	b7 0b       	sbc	r27, r23

00003442 <__udivmodhi4_ep>:
    3442:	88 1f       	adc	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	5a 95       	dec	r21
    3448:	a9 f7       	brne	.-22     	; 0x3434 <__udivmodhi4_loop>
    344a:	80 95       	com	r24
    344c:	90 95       	com	r25
    344e:	bc 01       	movw	r22, r24
    3450:	cd 01       	movw	r24, r26
    3452:	08 95       	ret

00003454 <_exit>:
    3454:	f8 94       	cli

00003456 <__stop_program>:
    3456:	ff cf       	rjmp	.-2      	; 0x3456 <__stop_program>
